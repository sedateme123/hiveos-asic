#!/hive/sbin/bash


#
# Copyright (C) 2017  Hiveon Holding LTD
# Distributed under Business Source License 1.1
# License information can be found in the LICENSE.txt file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#


# shellcheck disable=SC2034
{
	readonly script_mission='Client for ASICs: motd'
	readonly script_version='0.0.2'
	readonly script_basename="${0##*/}"
}


# functions

function seconds2dhms {
	#
	# Usage: seconds2dhms 'time_in_seconds' ['delimiter']
	#
	# Renders time_in_seconds to 'XXd XXh XXm[ XXs]' string
	# Default delimiter = ' '
	#

	# args

	local -i -r time_in_seconds="${1#-}" # strip sign, get ABS (just in case)
	local -r delimiter_DEFAULT=' '
	local -r delimiter="${2-${delimiter_DEFAULT}}"

	# vars

	local -i days hours minutes seconds
	local dhms_string

	# code

	((
		days = time_in_seconds / 60 / 60 / 24,
		hours = time_in_seconds / 60 / 60 % 24,
		minutes = time_in_seconds / 60 % 60,
		seconds = time_in_seconds % 60
	)) # arithmetic context, GOD I LOVE IT

	if (( days )); then
		dhms_string="${days}d${delimiter}${hours}h${delimiter}${minutes}m"
	elif (( hours )); then
		dhms_string="${hours}h${delimiter}${minutes}m"
	elif (( minutes )); then
		dhms_string="${minutes}m${delimiter}${seconds}s"
	else
		dhms_string="${seconds}s"
	fi

	echo "$dhms_string"
}

function netmask_to_cidr {
	# args
	local -r netmask="$1"

	# vars
	local -i cidr=0
	local x

	# code
	# shellcheck disable=SC2086
	# bc it's convenient
	x="0$( printf '%o' ${netmask//./ } )"

	while (( x > 0 )); do
		(( cidr += x % 2, x >>= 1 ))
	done

	echo "$cidr"
}

function get_uptime_in_dhm {
	# vars
	local -a uptime_raw
	local uptime_dhm

	# code
	IFS=' ' read -r -a uptime_raw < /proc/uptime
	uptime_dhm="$( seconds2dhms $(( ${uptime_raw[0]/\.} / 100 )) )"

	echo "$uptime_dhm"
}

function get_fs_name {
	# consts
	local -r fs_RE='### FLIGHT SHEET "(.*)" ###'

	# vars
	local fs_name='' wallet_conf_raw_content=''

	# code
	if [[ -s /hive-config/wallet.conf ]]; then
		# get the content
		wallet_conf_raw_content="$( < /hive-config/wallet.conf )"

		# then parse the name
		if [[ $wallet_conf_raw_content =~ $fs_RE ]]; then
			# ok case: FS name is not null
			# ### FLIGHT SHEET "foobar" ###
			fs_name="${BASH_REMATCH[1]}" # ="foobar"
		else
			# not ok case: absent FS name
			# ### FLIGHT SHEET ###
			fs_name='ERR_not_a_valid_fs_name'
		fi

		if [[ -z "$fs_name" ]]; then
			# ok case: FS name is empty
			# ### FLIGHT SHEET "" ###
			fs_name='WARN_untitled_fs'
		fi
	else
		fs_name='WARN_wallet_conf_empty_or_not_found'
	fi

	echo "$fs_name"
}

function pretty_print {
	# consts
	local -r label_color="${LGRAY-}"
	local -r variable_ok_color="${BCYAN-}"
	local -r variable_empty_color="${DGRAY-}"

	# code
	while true; do
		local label="$1"
		local -n variable_name="$2"
		local delimiter="$3"

		printf '%b%s ' "$label_color" "$label"

		if [[ -n "$variable_name" ]]; then
			printf '%b%s' "$variable_ok_color" "$variable_name"
		else
			printf '%b%s' "$variable_empty_color" "[WARN_parameter_not_set]"
		fi

		if [[ -n "$delimiter" ]]; then
			printf ' %b%s ' "${PURPLE-}" "$separator"
			shift 3
		else
			printf ' %b\n' "${NOCOLOR-}"
			break
		fi
	done
}

function rematch {
	# actually we don't have to use pure bash eh?
	# rematch 'regex' ['string']

	# args
	local -r regex="$1"
	local -r string="${2:-$( </dev/stdin )}" # get from arg or stdin

	# code
	[[ "$string" =~ $regex ]]
	printf '%s\n' "${BASH_REMATCH[@]:1}"
}

function show_mixed_logs {
	# consts
	local -r miner_status_log='/nvdata/miner_status.log'
	local -r error_line_marker='MaRkEr'
	local -r -i error_line_marker_length="${#error_line_marker}"
	local -r -i tail_lines=12

	# vars
	local this_nvram_directory controller_log_probe controller_log='' line=''

	# code
	for this_nvram_directory in '/config' '/nvdata' '/opt'; do
		controller_log_probe="$this_nvram_directory/client-controller.log"
		if [[ -s "$controller_log_probe" ]]; then
			controller_log="$controller_log_probe"
			break
		fi
	done

	if [[ -n "$controller_log" || -s "$miner_status_log" ]]; then
		echo -e "${DGRAY-}-- Last lines from logs --------------------------------------------------------${NOCOLOR-}"

		{
			if [[ -n "$controller_log" ]]; then
				grep -E '^[0-9]{4}' "$controller_log" | tail -n "$tail_lines"
			fi

			if [[ -s "$miner_status_log" ]]; then
				while IFS= read -r line; do
					echo -e "${line}${error_line_marker}"
				done < <( grep -E 'WARN|ERR' "$miner_status_log" | tail -n "$tail_lines" )
			fi
		} | sort -us | {
			while IFS= read -r line; do
				if [[ "${line: -${error_line_marker_length}}" == "${error_line_marker}" ]]; then
					echo -e " ${RED-}${line::-${error_line_marker_length}}${NOCOLOR-}"
				else
					echo -e " $line"
				fi
			done
		} | tail -n "$tail_lines"

		echo -e "${DGRAY-}--------------------------------------------------------------------------------${NOCOLOR-}"
		echo
	fi
}


# global sources

[[ -s /hive/bin/colors		]] && source /hive/bin/colors
[[ -s /hive/bin/asic-model	]] && source /hive/bin/asic-model
[[ -s /hive-config/rig.conf	]] && source /hive-config/rig.conf


# global consts

declare -r separator='Â·' # UTF


# main()

[[ "$ASIC_MODEL" =~ 'Toddminer C1' && ! "$PATH" =~ (^|:)/sbin ]] && export PATH="$PATH:/sbin:/usr/sbin" # add only if not exist

# collect sysinfo
[[ -s /hive/etc/VERSION	]] && agent_release_version="$( < /hive/etc/VERSION )"
[[ -s /hive/etc/build	]] && agent_build_version="$( < /hive/etc/build )"
agent_full_version="${agent_release_version:-[unknown]}-${agent_build_version:-release}"

gateway="$(			LANG=C route -n | rematch '[0-9\.]+[ \t]+([0-9\.]+).+UG' )"

if [[ "$ASIC_MODEL" == 'Toddminer C1'* ]]; then
    mac="$(			LANG=C ifconfig eth0 | rematch 'ether (.{17})' )"
    ip="$(			LANG=C ifconfig eth0 | grep 'inet ' | awk '{ print $2 }' )"
    netmask="$(		LANG=C ifconfig eth0 | grep 'netmask ' | awk '{ print $4 }' )"
    nameserver="$(	grep -m1 '^nameserver' /etc/resolv.conf | awk '{ print $2 }' )"
else
    mac="$(			LANG=C ifconfig eth0 |	rematch 'HWaddr (.{17})' )"
    ip="$(			LANG=C ifconfig eth0 |	rematch 'inet addr:([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)' )"
    netmask="$(		LANG=C ifconfig eth0 |	rematch 'Mask:([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)' )"
    nameserver="$(							rematch 'nameserver[ \t]+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)' < /etc/resolv.conf )"
fi

hostname="$( hostname )"

mac="${mac,,}" # tolower()
cidr="$( netmask_to_cidr "$netmask" )"
ip_w_cidr="${ip} /${cidr}"

uptime="$( get_uptime_in_dhm )"
local_date="$( date '+%F %T %z' )"

fs_name="$( get_fs_name )"

if (( IS_ASIC_CUSTOM_FW )); then
	fw_version="$ASIC_CUSTOM_FW_VERSION_RAW"
elif [[ -x /home/sm/miner/build/cpuminer ]] && [[ -e /flask/setHashinJson ]]; then
	fw_version="$( /home/sm/miner/build/cpuminer -V | head -n 1 )"
	if [[ "$ASIC_MODEL" == 'Toddminer C1' ]]; then
		fw_version="$( awk '{ print $3 }' <<< "$fw_version" )"
	else
		fw_version="$( awk '{ print $4 }' <<< "$fw_version" )"
	fi
elif [[ -s /usr/bin/compile_time ]]; then
	fw_version="$( sed -n 1p /usr/bin/compile_time )"
else
	fw_version='[unknown]'
fi

# print
pretty_print 'host' hostname / 'uptime' uptime / 'local date' local_date
pretty_print 'ip' ip_w_cidr / 'mac' mac / 'gw' gateway / 'dns' nameserver
echo
echo -e "${BPURPLE-}${ASIC_MODEL:-[not set]} ${PURPLE-}${separator} ${fw_version}${NOCOLOR-}"
echo
pretty_print 'Worker' WORKER_NAME / 'Flight sheet' fs_name / 'Client' agent_full_version
pretty_print 'Farm ID' FARM_ID / 'Rig ID' RIG_ID / 'API server' HIVE_HOST_URL

if [[ -n "$FARM_HASH" ]]; then
	pretty_print 'FARM_HASH' FARM_HASH
fi

echo

if [[ "$1" != '--disable-logs' ]]; then
	show_mixed_logs
fi

exit 0
