#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#


readonly script_mission='Client for ASICs: Antminer overclock profiles management'
readonly script_version='0.1.13'
readonly script_basename="${0##*/}"


# functions

function ant17:get_current_profile_id {
	read_variable_from_file '/config/profile.txt' 'tune_profile'
}

function ant17:get_description_for_profile {

	# args

	local -r -i _profile_id="$1"

	# vars

	local ASIC_MODEL_short profile_description_file

	# code

	ASIC_MODEL_short="$( cut -d' ' -f2 <<< "$ASIC_MODEL" )"
	profile_description_file="/hive/share/profiles/${ASIC_MODEL_short}_${ASIC_CUSTOM_FW_VERSION}_description"

	read_variable_from_file "$profile_description_file" "profile_${_profile_id}"
}

function ant17:get_saved_profiles_ids {

	# consts

	local -r saved_profiles_directory='/config/profiles'
	local -r valid_profile_id_RE='^[0-9]{1,3}$'

	# vars

	local this_profile_directory this_profile_id
	local -a -i saved_profiles_collection

	# code

	if [[ -e "$saved_profiles_directory" && -d "$saved_profiles_directory" ]]; then
		for this_profile_directory in "$saved_profiles_directory"/*; do
			if [[ -d "$this_profile_directory" ]]; then
				this_profile_id="${this_profile_directory##*/}"
				if [[ "$this_profile_id" =~ $valid_profile_id_RE ]]; then
					saved_profiles_collection+=( "$this_profile_id" )
				fi
			fi
			printf '%d\n' "${saved_profiles_collection[@]}"
		done
	else
		return 1
	fi
}

function ant17:print_status {

	# vars

	local -a profile_description profile_tune_status is_profile_saved
	local this_profile_id
	local current_profile_id current_profile_description current_profile_tune_status
	local marker_current marker_tune_status marker_saved

	# code

	for this_profile_id in $( ant17:get_saved_profiles_ids ); do
		profile_description[$this_profile_id]="$( ant17:get_description_for_profile "$this_profile_id" )"
		profile_tune_status[$this_profile_id]="$( read_variable_from_file "/config/profiles/${this_profile_id}/profile.txt" 'tune_status' )"
		is_profile_saved[$this_profile_id]=1
	done

	echo "  $ASIC_MODEL @ $ASIC_CUSTOM_FW_VERSION"
	echo

	if [[ -s /config/profile.txt ]]; then
		current_profile_id="$( ant17:get_current_profile_id )"
		current_profile_description="$( ant17:get_description_for_profile "$current_profile_id" )"
		current_profile_tune_status="$( read_variable_from_file '/config/profile.txt' 'tune_status' )"
		profile_description[$current_profile_id]="$current_profile_description"
	else
		echo -n '  Running on factory settings'
		if (( ${#is_profile_saved[@]} > 0 )); then
			echo '. Saved profiles:'
		fi
		echo
	fi

	for this_profile_id in "${!profile_description[@]}"; do
		marker_current=''
		marker_tune_status=''
		marker_saved='not saved yet'

		if (( this_profile_id == current_profile_id )); then
			marker_current='>'
			marker_tune_status="${tune_status_dictionary[$current_profile_tune_status]}"
		else
			marker_tune_status="${tune_status_dictionary[${profile_tune_status[$this_profile_id]}]}"
		fi
		[[ -n "${is_profile_saved[this_profile_id]}" ]] && marker_saved='saved'

		printf '%1.1s %02d. %15.15s (%s, %s)\n' "$marker_current" "$this_profile_id" "${profile_description[this_profile_id]}" "$marker_saved" "$marker_tune_status"
	done
	echo
}


# sources

source colors || echo 'ERROR: /hive/bin/colors not found'
source asic-model || { echo 'ERROR: /hive/bin/asic-model not found'; exit 1; }
source /hive/bin/hive-functions.sh || { echo 'ERROR: /hive/bin/hive-functions.sh not found'; exit 1; }


# consts

declare -r tune_status_FACTORY=0
declare -r tune_status_TUNING=1
declare -r tune_status_DONE=2
declare -r -a tune_status_dictionary=(
	[tune_status_FACTORY]='factory'
	[tune_status_TUNING]='in tuning now'
	[tune_status_DONE]='tuned'
)


# vars

declare current_profile_file #template_profile_file
declare -i kill_miner_FLAG=0 wait_for_tuning_FLAG=0


# main

if [[ ( "$ASIC_CUSTOM_FW_VERSION" == '1.02' || "$ASIC_CUSTOM_FW_VERSION" == '1.03' ) && ( "$ASIC_MODEL" == 'Antminer S9'* || "$ASIC_MODEL" == 'Antminer T9'* ) ]]; then
	current_profile_file='/config/autoTune.conf'
	current_config_file='/config/config.conf'
	autotune_log_file='/tmp/auto-tune'

	case "$1" in
		'status'|'retune'|'re-tune')
			echo "Not implemented"
			exit 1
			;;

		'default'|'factory')
			rm -rf "$current_profile_file" > /dev/null 2>&1
			rm -rf "$current_config_file" > /dev/null 2>&1
			;;

		*)
			echo "$1" | jq -r '. | with_entries( select(.key) ) | to_entries[] | "\(.key)=\(.value)"' | sed ':a;N;$!ba;s/\n/\&/g' > "$current_profile_file"
			;;
	esac

#	sed "/^\s*$/d" -i /config/config.conf > /dev/null 2>&1
	for this_user_id in 'www' 'wwwrun' 'root'; do
		if id -u "$this_user_id" > /dev/null 2>&1; then
			su_user="$this_user_id"
			chown $su_user:$su_user "$current_profile_file" > /dev/null 2>&1
			chown $su_user:$su_user "$current_config_file" > /dev/null 2>&1
			break
		fi
	done

	if is_file_exist_but_empty "$current_config_file"; then # fix autotune bug
		echo "WARNING: $current_config_file is empty, deleting..."
		rm -f "$current_config_file"
	fi

	rm -f /config/manual_freqs.txt
	killall auto-tune > /dev/null 2>&1
	snore 1
	rm -f /config/yellow-step
	killall tune-yellow > /dev/null 2>&1
	nohup su - "$su_user" -c '/usr/bin/auto-tune' > /dev/null 2>&1
	if grep -q 'enable_auto_chip=1' "$current_profile_file"; then
		nohup su - "$su_user" -c '/usr/bin/auto-chip-tune' > /dev/null 2>&1 & disown
	fi

	if [[ -s "$autotune_log_file" ]]; then
		cat "$autotune_log_file"
		echo
	fi
	echo 'Autotune config applied!'

elif [[ "$ASIC_CUSTOM_FW_VERSION" == '1.00' && ( "$ASIC_MODEL" == "Antminer S17 $ASIC_CUSTOM_FW_BRAND"* || "$ASIC_MODEL" == "Antminer T17 $ASIC_CUSTOM_FW_BRAND"* ) ]]; then
	current_profile_file='/config/profile.txt'

	case "$1" in
		'status')
			echo "Not yet implemented"
			exit 1
			;;

		'default'|'factory')
			kill_miner_FLAG=1

			rm -rf "$current_profile_file" > /dev/null 2>&1
			message info 'Auto-tune is OFF. Running on non-optimal factory settings' --silent
			;;

		'retune'|'re-tune')
			kill_miner_FLAG=1
			wait_for_tuning_FLAG=1

			if [[ -s "$current_profile_file" ]]; then
				sed -i "s|tune_status=${tune_status_DONE}|tune_status=${tune_status_TUNING}|" "$current_profile_file" > /dev/null 2>&1
				message ok 'Re-tune is started' --silent
			fi
			;;

		*)
			kill_miner_FLAG=1
			wait_for_tuning_FLAG=1

			echo "$1" |
				jq -r '. | with_entries( select(.key) ) | to_entries[] | "\(.key)=\(.value)"' |
					sed ':a;N;$!ba;s/\n/\&/g' |
						sed s/\&/\\n/g |
							sed '$ a \\tune_status=0' > "$current_profile_file"
			;;
	esac

	if (( kill_miner_FLAG )); then
		killall bmminer
	fi

	if (( wait_for_tuning_FLAG )); then
		n=0
		until tune_status="$( read_variable_from_file "$current_profile_file" 'tune_status' )" && (( tune_status == tune_status_DONE )); do
			if (( ++n == 200 )); then
				# forcibly stop tuning after 200 minutes
				sed -i "s|tune_status=${tune_status_TUNING}|tune_status=${tune_status_DONE}|" "$current_profile_file" > /dev/null 2>&1
				miner restart
			fi
			snore 60
		done
		miner tuning
	fi

elif [[ "$ASIC_MODEL" == 'Antminer S17'* || "$ASIC_MODEL" == 'Antminer T17'* ]]; then
	current_profile_file='/config/profile.txt'

	case "$1" in
		'status')
			ant17:print_status
			;;

		'default'|'factory')
			kill_miner_FLAG=1

			rm -rf "$current_profile_file" > /dev/null 2>&1
			message info 'Auto-tune is OFF. Running on non-optimal factory settings' --silent
			;;

		'retune'|'re-tune')
			kill_miner_FLAG=1
			wait_for_tuning_FLAG=1

			if [[ -s "$current_profile_file" ]]; then
				sed -i "s|tune_status=${tune_status_DONE}|tune_status=${tune_status_TUNING}|" "$current_profile_file" > /dev/null 2>&1
				message ok 'Re-tune is started' --silent
			fi
			;;

		*)
			kill_miner_FLAG=1

			profile_id="$( jq -r .profile <<< "$1" )"
#			template_profile_file="/hive/share/profiles/$( cut -d' ' -f2 <<< "$ASIC_MODEL" )"

			# if saved profile does exist (and isn't empty) -- copy it over the current one
			if [[ -s "/config/profiles/$profile_id/profile.txt" ]]; then
				wait_for_tuning_FLAG=0
				cp -rf "/config/profiles/$profile_id/"* /config
				message info 'Using saved profile, no need to tune' --silent
			else
				wait_for_tuning_FLAG=1
# it was duct tape of sorts
#				if [[ -s "$template_profile_file" ]]; then
#					#temp S17+ fix. DOTO delete profile
#					cat "$template_profile_file" |
#						jq -r --arg profile_id "$profile_id" '.[$profile_id] | with_entries( select(.key) ) | to_entries[] | "\(.key)=\(.value)"' |
#							sed ':a;N;$!ba;s/\n/\&/g' |
#								sed s/\&/\\n/g |
#									sed -e '$ a tune_status=0' -e '$ a tune_max_restarts=10' -e '$ a tune_uptime=240' > "$current_profile_file"
#				else
#					echo "$1" |
#						jq -r '. | with_entries( select(.key) ) | to_entries[] | "\(.key)=\(.value)"' <<< "$1" |
# useless back and forth conversion
#							sed ':a;N;$!ba;s/\n/\&/g' |
#								sed s/\&/\\n/g |
#									sed -e '$ a tune_status=0' -e '$ a tune_max_restarts=10' -e '$ a tune_uptime=240' > "$current_profile_file"
#				fi
				{	# build a new config
					echo 'tune_status=0'
					jq -r '. | with_entries( select(.key) ) | to_entries[] | "\(.key)=\(.value)"' <<< "$1"
					echo 'tune_max_restarts=10'
					echo 'tune_uptime=240'
				} > "$current_profile_file"
			fi
			;;
	esac

	if (( kill_miner_FLAG )); then
		if [[ -f /www/pages/cgi-bin/apply_profile.cgi ]]; then
			sh /www/pages/cgi-bin/apply_profile.cgi
		else
			killall bmminer
		fi
	fi

	if (( wait_for_tuning_FLAG )); then
		# wait for 500 minutes
		for (( n=0; n < 500; n++ )); do
			snore 60
			if tune_status="$( read_variable_from_file "$current_profile_file" 'tune_status' )" && (( tune_status == tune_status_DONE )); then
				miner tuning
				break
			fi
		done
	fi

else
	current_profile_file='/config/autoTune.conf'
	current_config_file='/config/config.conf'
	autotune_log_file='/tmp/auto-tune'

	if [[ "$1" == 'default' ]]; then
		rm -rf "$current_profile_file" > /dev/null 2>&1
		rm -rf "$current_config_file" > /dev/null 2>&1
		if [[ "$ASIC_MODEL" == 'Antminer L3'* ]]; then
			killall -9 cgminer
		fi
	else
		echo "$1" | jq -r '. | with_entries( select(.key) ) | to_entries[] | "\(.key)=\(.value)"' | sed ':a;N;$!ba;s/\n/\&/g' > "$current_profile_file"
	fi
	conftune="$( < "$current_profile_file" )"
	if [[ -e /usr/bin/compile_ver && "$ASIC_MODEL" == 'Antminer S9'* ]]; then
		sed -i 's/profile=1\&/profile=1\&slow_freq_start=400\&slow_freq_step=25\&slow_volt_max=840\&/' "$current_profile_file"
		sed -i 's/profile=2\&/profile=2\&slow_freq_start=400\&slow_freq_step=25\&slow_volt_max=840\&/' "$current_profile_file"
		sed -i 's/profile=3\&/profile=3\&slow_freq_start=400\&slow_freq_step=50\&slow_volt_max=860\&/' "$current_profile_file"
		sed -i 's/profile=4\&/profile=4\&slow_freq_start=400\&slow_freq_step=50\&slow_volt_max=870\&/' "$current_profile_file"
		sed -i 's/profile=5\&/profile=5\&slow_freq_start=450\&slow_freq_step=50\&slow_volt_max=880\&/' "$current_profile_file"
		sed -i 's/profile=6\&/profile=6\&slow_freq_start=450\&slow_freq_step=50\&slow_volt_max=880\&/' "$current_profile_file"
		sed -i 's/profile=7\&/profile=7\&slow_freq_start=500\&slow_freq_step=50\&slow_volt_max=890\&/' "$current_profile_file"
		sed -i 's/profile=8\&/profile=8\&slow_freq_start=600\&slow_freq_step=50\&slow_volt_max=890\&/' "$current_profile_file"
		sed -i 's/profile=9\&/profile=9\&slow_freq_start=600\&slow_freq_step=50\&slow_volt_max=900\&/' "$current_profile_file"
		sed -i 's/profile=10\&/profile=10\&slow_freq_start=650\&slow_freq_step=50\&slow_volt_max=910\&/' "$current_profile_file"
		sed -i 's/profile=11\&/profile=11\&slow_freq_start=650\&slow_freq_step=50\&slow_volt_max=930\&/' "$current_profile_file"
		sed -i 's/profile=12\&/profile=12\&slow_freq_start=700\&slow_freq_step=50\&slow_volt_max=940\&/' "$current_profile_file"
		sed -i 's/profile=13\&/profile=13\&slow_freq_start=750\&slow_freq_step=50\&slow_volt_max=950\&/' "$current_profile_file"

		snore 1
		sed -i 's/wait_after_restart_chip=[0-9]*\&/wait_after_restart_chip=7\&/' "$current_profile_file"
		snore 1

		case "$conftune" in
			*"profile=1"\&*		)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=800\&/' "$current_profile_file"		;;
			*"profile=2"\&*		)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=800\&/' "$current_profile_file"		;;
			*"profile=3"\&*		)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=800\&/' "$current_profile_file"		;;
			*"profile=4"\&*		)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=800\&/' "$current_profile_file"		;;
			*"profile=5"\&*		)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=810\&/' "$current_profile_file"		;;
			*"profile=6"\&*		)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=820\&/' "$current_profile_file"		;;
			*"profile=7"\&*		)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=820\&/' "$current_profile_file"		;;
			*"profile=8"\&*		)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=830\&/' "$current_profile_file"		;;
			*"profile=9"\&*		)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=830\&/' "$current_profile_file"		;;
			*"profile=10"\&*	)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=840\&/' "$current_profile_file"		;;
			*"profile=11"\&*	)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=850\&/' "$current_profile_file"		;;
			*"profile=12"\&*	)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=860\&/' "$current_profile_file"		;;
			*"profile=13"\&*	)		sed -i 's/voltage_from=[0-9]*\&/voltage_from=870\&/' "$current_profile_file"		;;
		esac
	fi

	sed "/^\s*$/d" -i "$current_config_file" > /dev/null 2>&1
	for this_user_id in 'www' 'wwwrun' 'root'; do
		if id -u "$this_user_id" > /dev/null 2>&1; then
			su_user="$this_user_id"
			chown $su_user:$su_user "$current_profile_file" > /dev/null 2>&1
			chown $su_user:$su_user "$current_config_file" > /dev/null 2>&1
			break
		fi
	done

	if is_file_exist_but_empty "$current_config_file"; then # fix autotune bug for L3
		echo "WARNING: $current_config_file is empty, deleting..."
		rm -f "$current_config_file"
	fi

	rm -f /config/manual_freqs.txt
	killall auto-tune > /dev/null 2>&1
	killall auto-chip-tune > /dev/null 2>&1
	snore 1
	nohup su - "$su_user" -c '/usr/bin/auto-tune' > /dev/null 2>&1
	if grep -q 'enable_auto_chip=1' "$current_profile_file"; then
		nohup su - "$su_user" -c '/usr/bin/auto-chip-tune' > /dev/null 2>&1 & disown
	fi

	if [[ -s "$autotune_log_file" ]]; then
		cat "$autotune_log_file"
		echo
	fi
	echo 'Autotune config applied'
fi

exit 0
