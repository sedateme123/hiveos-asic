#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#
# Linted by shellcheck 0.3.7
#


readonly script_mission='Client for ASICs: Average Hashrate Aggregator'
readonly script_version='0.3.5'
readonly script_basename="${0##*/}"
#
readonly script_DEBUG="${script_DEBUG:-0}" # use value from env if exists
#
source /hive/bin/hive-functions.sh || { echo 'ERROR: /hive/bin/hive-functions.sh not found'; exit 1; }


# !!! bash strict mode, no unbound variables
set -o nounset


# functions

function print_script_usage {
	echo "Usage: ${CYAN-}${script_basename} [start|stop|restart|interactive|log]${NOCOLOR-}"
	echo
	echo "  ${CYAN-}start${NOCOLOR-}          start daemon (also it does when being run without any arguments)"
	echo "  ${CYAN-}stop${NOCOLOR-}           stop daemon"
	echo "  ${CYAN-}restart${NOCOLOR-}        restart daemon"
	echo "  ${CYAN-}interactive${NOCOLOR-}    run in the interactive mode (as is, without the screen)"
	echo "  ${CYAN-}log${NOCOLOR-}            show a last $screen_hardcopy_log_lines lines of log"
}

function errcho {
	# consts
	local -r -i func_name_width=31

	# code
	printf '%(%T)T %-*.*s %s\n' -1 "$func_name_width" "$func_name_width" "${FUNCNAME[1]}" "$*"
	(( script_DEBUG )) &&
		printf '%(%T)T %-*.*s %s\n' -1 "$func_name_width" "$func_name_width" "${FUNCNAME[1]}" "$*" >> "$debug_log_FILE"
} 1>&2 # all output goes to stderr

function smart_round {
	#
	# Usage: smart_round 'number_to_round'
	#
	# Get rid of the insignificant decimal places after the dot
	#

	# args
	# shellcheck disable=SC2154
	# bc 'exitcode_ERROR_IN_ARGUMENTS' already defined in the library
	(( $# == 1 )) || { errcho 'only 1 argument allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local number_to_round="${1:-0}"

	# vars
	local -i integer_part magnitude
	local rounding_template

	# code
#	if [[ "$number_to_round" != *.* ]]; then
#		# integer, nothing to round
#		echo "$number_to_round"
#		return
#	fi

#	# ok, float
	integer_part="${number_to_round%.*}"
	(( magnitude = ${#integer_part} - 1 ))
	case "$magnitude" in
		0		)	rounding_template='%.3g'	;;
		[1-3]	)	rounding_template='%.4g'	;;
		[4-10]	)	rounding_template='%.0f'	;;
		*		)	rounding_template='%g'		;;
	esac
	#errcho "integer_part: $integer_part, magnitude: $magnitude, rounding_template: '$rounding_template'"
	# shellcheck disable=SC2059
	# bc i need it as is
	printf "$rounding_template\n" "$number_to_round"
}

function generate_avg_khs_json {
	#
	# Usage: generate_avg_khs_json 'avg_khs_15m' 'avg_khs_1h' ['avg_khs_1d']
	#
	# Desired output example: "avg_khs": {"ethash": [159785, 134513], "randomhash2": [88.952, 64.517]}
	#                         ^^^^^^^^^ that key created, explicitly, by --argjson jq argument in the agent while forming a stats packet
	#

	# args
	(( $# == 2 || $# == 3 )) || { errcho 'only 2 or 3 arguments allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local avg_khs_15m="${1:-0}"
	local avg_khs_1h="${2:-0}"
	#local avg_khs_1d="${3:-0}"

	# consts
	local -r this_miner_algo="${ASIC_ALGO:-N/A}"

	# vars
	local rounded_15m rounded_1h

	# code
	rounded_15m="$( smart_round "$avg_khs_15m" )"
	rounded_1h="$( smart_round "$avg_khs_1h" )"
	errcho "avg_khs_15m: $avg_khs_15m, avg_khs_1h: $avg_khs_1h"
	# and here comes a nameless object:
	printf '{"%s":[%s,%s]}' "$this_miner_algo" "$rounded_15m" "$rounded_1h" # "$avg_khs_1d"
}


# screen infrastructure

# shellcheck disable=SC2120
# bc of the defaults
function screen_session_attach {
	#
	# Usage: screen_session_attach ['session name'] -> $?
	#

	# args
	(( $# <= 1 )) || { errcho 'only 0 or 1 argument allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r session_name="${1:-$script_basename}"

	# code
	echo -n "> Attaching to screen session '$session_name'... "
	if is_screen_session_exist "$session_name"; then
		if [[ -t 1 ]]; then
			if screen -r "$session_name"; then
				#echo '  Screen session attached'
				# shellcheck disable=SC2154
				# bc 'exitcode_OK' already defined in the library
				return $(( exitcode_OK ))
			else
				echo 'FAILED'
			fi
		else
			echo "SKIPPED (shell isn't interactive)"
		fi
	else
		echo 'NOT FOUND'
	fi

	return $(( exitcode_NOT_OK ))
}

# shellcheck disable=SC2120
# bc of the defaults
function screen_session_start {
	#
	# Usage: screen_session_start ['session name' ['session_title']] -> $?
	#

	# args
	(( $# <= 2 )) || { errcho 'only 0, 1 or 2 arguments allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r session_name="${1:-$script_basename}"
	local -r session_title="${2:-$script_mission v$script_version}"

	# consts
	local -r -i attempts_limit=120

	# vars
	local -i attempts_counter=0

	# code
	echo -n "> Starting screen session '$session_name'... "
	if ! is_screen_session_exist "$session_name"; then
		if screen -dm -S "$session_name" -t "$session_title" -h "$screen_hardcopy_log_lines" "$session_name" 'interactive'; then
			snore 0.2 # sometimes screen is pretty slow
			while ! is_screen_session_exist "$session_name" && (( attempts_counter++ < attempts_limit )); do
				echo "  Waiting for session to start [$attempts_counter/$attempts_limit]..."
				snore 0.5
			done
			echo 'OK'
			return $(( exitcode_OK ))
		else
			echo 'FAILED'
		fi
	else
		echo 'SKIPPED (already exists)'
	fi

	return $(( exitcode_NOT_OK ))
}

# shellcheck disable=SC2120
# bc of the defaults
function screen_session_stop {
	#
	# Usage: screen_session_stop ['session name'] -> $?
	#

	# args
	(( $# <= 1 )) || { errcho 'only 0 or 1 argument allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r session_name="${1:-$script_basename}"

	# consts
	local -r -i attempts_limit=120

	# vars
	local -i attempts_counter=0

	# code
	echo -n "> Stopping screen session '$session_name'... "
	if is_screen_session_exist "$session_name"; then
		if screen -S "$session_name" -X quit; then
			snore 0.2 # sometimes screen is pretty slow
			while is_screen_session_exist "$session_name" && (( attempts_counter++ < attempts_limit )); do
				echo "  Waiting for session to stop [$attempts_counter/$attempts_limit]..."
				snore 0.5
			done
			echo 'OK'
			return $(( exitcode_OK ))
		else
			echo 'FAILED'
		fi
	else
		echo "SKIPPED (does not exist)"
	fi

	return $(( exitcode_NOT_OK ))
}

# shellcheck disable=SC2120
# bc of the defaults
function screen_session_log {
	#
	# Usage: screen_session_log ['session name']
	#

	# args
	(( $# <= 1 )) || { errcho 'only 0 or 1 argument allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r session_name="${1:-$script_basename}"

	# code
	if is_screen_session_exist "$session_name"; then
		if touch "$screen_hardcopy_log_FILE" 2> /dev/null; then
			screen -S "$session_name" -p 0 -X hardcopy -h "$screen_hardcopy_log_FILE"
			#                         -p Preselect a window. This is useful when you want to reattach to a specific window or
			#                            you want to send a command via the "-X" option to a specific window.
			if [[ -f "$screen_hardcopy_log_FILE" ]]; then
				awk 'NF {f=1} f' "$screen_hardcopy_log_FILE" # skip all empty lines, https://stackoverflow.com/a/19767713
				rm "$screen_hardcopy_log_FILE"
				return $(( exitcode_OK ))
			else
				errcho "screen didn't produce the log file"
			fi
		else
			errcho "cannot write log to $screen_hardcopy_log_FILE (/tmp is read-only?), exiting..."
		fi
	else
		echo "! Screen session '$session_name' does not exist"
	fi

	return $(( exitcode_NOT_OK ))
}


# async infrastructure

function create_spinlock {
	until ln "$khs_ts_1h_FILE" "$khs_ts_1h_lock_FILE" 2>/dev/null; do
		errcho "Spinlock does prevent ${FUNCNAME[1]}() to operate. Waiting for lock being freed..."
		snore 0.5
	done
}

function remove_spinlock {
	rm -f "$khs_ts_1h_lock_FILE"
}

function start_bg_job {
	# args
	(( $# > 0 )) || { errcho 'at least 1 argument expected'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r -a jobspec_ARR=( "$@" )

	# code
	if ! jobs "%${jobspec_ARR[*]}" &> /dev/null; then
		if eval "${jobspec_ARR[*]} &"; then
			errcho "Started '${jobspec_ARR[*]}'"
			return $(( exitcode_OK ))
		else
			erccho "'${jobspec_ARR[*]}' starting error"
		fi
	else
		errcho "'${jobspec_ARR[*]}' is already running"
	fi

	return $(( exitcode_NOT_OK ))
}

function stop_bg_job {
	# args
	(( $# > 0 )) || { errcho 'at least 1 argument expected'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r -a jobspec_ARR=( "$@" )

	# code
	if jobs "%${jobspec_ARR[*]}" &> /dev/null; then
		if kill -s SIGUSR1 "%${jobspec_ARR[*]}"; then
#		if kill -s SIGQUIT "%${jobspec_ARR[*]}"; then
			errcho "Stopping '${jobspec_ARR[*]}'"
			return $(( exitcode_OK ))
		else
			errcho "'${jobspec_ARR[*]}' stopping error"
		fi
	else
		errcho "'${jobspec_ARR[*]}' is not running atm. Jobs list:"
		errcho "$( jobs -l )"
	fi

	return $(( exitcode_NOT_OK ))
}

function execute_every_nth_second {
	# args
	(( $# > 1 )) || { errcho 'at least 2 arguments expected'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r every_nth_second="${1:-10}" # default to 10s
	local -r -a command_to_execute_ARR=( "${@:2}" )

	# vars
	local -i the_now_before_in_s the_now_after_in_s time_remainder_in_s execution_time_in_s last_execution_time_in_s
	local -i snore_cycle_counter
	local this_event

	# flags
	local -i is_halt_condition_FLAG=0

	# traps
	for this_event in SIGUSR1 SIGINT SIGHUP SIGQUIT EXIT; do
		# shellcheck disable=SC2064
		# bc trap command format
		trap "is_halt_condition_FLAG=1; errcho \"$this_event received, finishing handler...\"" "$this_event"
	done

	# code
	errcho 'Handler started, signal traps set'

	set_variable_to_current_system_time_in_seconds 'the_now_before_in_s'
	(( last_execution_time_in_s = the_now_before_in_s ))

	until (( is_halt_condition_FLAG )); do
		set_variable_to_current_system_time_in_seconds 'the_now_before_in_s'

		if (( the_now_before_in_s % every_nth_second != 0 )); then
			(( time_remainder_in_s = ( every_nth_second - the_now_before_in_s % every_nth_second ) ))
		else
			(( the_now_before_in_s - last_execution_time_in_s > every_nth_second )) &&
				errcho "HANGING? Skipped $(( ( the_now_before_in_s - last_execution_time_in_s ) / every_nth_second )) duty cycles"

			#errcho "Executing '${command_to_execute_ARR[*]}'"
			"${command_to_execute_ARR[@]}"

			set_variable_to_current_system_time_in_seconds 'the_now_after_in_s'
			((
				last_execution_time_in_s = the_now_after_in_s,
				execution_time_in_s = the_now_after_in_s - the_now_before_in_s,
				time_remainder_in_s = ( every_nth_second - the_now_after_in_s % every_nth_second )
			))

			(( execution_time_in_s > every_nth_second )) &&
				errcho "'${command_to_execute_ARR[*]}' took ${execution_time_in_s}s, more than ${every_nth_second}s"
		fi

		#errcho "sleeping for $time_remainder_in_s seconds"
		if (( time_remainder_in_s > 0 )); then
			for (( snore_cycle_counter = 0; snore_cycle_counter < time_remainder_in_s; snore_cycle_counter++ )); do
				(( is_halt_condition_FLAG )) && break # to finish almost immediately (if signal's fired)
				snore 0.95 # not a whole second -- layin' some papers
			done
		else
			errcho "WARNING: time_remainder_in_s == ${time_remainder_in_s}s"
		fi
	done

	trap - SIGUSR1 SIGINT SIGHUP SIGQUIT EXIT
	errcho 'Handler finished, signal traps cleared'
}


# upload/download (cloud-based backup)

function is_api_server_response_ok {
	#
	# Usage: is_api_server_response_ok 'curl_exitcode' 'server_response' ['is_silent_FLAG']
	#

	# assert args
	(( $# == 2 || $# == 3 )) || { errcho 'only 2 or 3 argument allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }

	# args
	local -r -i curl_exitcode="$1"
	local -r server_response="$2"
	local -r -i is_silent_FLAG="${3:-0}"

	# vars
	local server_error_message

	# code
	if (( curl_exitcode )); then
		if (( ! is_silent_FLAG )); then
			errcho "Error connecting to $HIVE_HOST_URL" # TODO the caller func can connect any server, not only $HIVE_HOST_URL
			errcho "$( human-curl-error "$curl_exitcode" )"
		fi
		return $(( exitcode_NOT_OK ))
	fi

	if [[ -z "$server_response" ]]; then
		if (( ! is_silent_FLAG )); then
			errcho "Error. Server responded with an empty answer."
		fi
		return $(( exitcode_NOT_OK ))
	fi

	if server_error_message="$( jq --exit-status --raw-output 'if .error and .error.code then "\(.error.message) (\(.error.code))" else false end' <<< "$server_response" )"; then # 'syntax highlighting fix
		#                          ^^^^^^^^^^^^^ jq will exit with exitcode 0 only if output is 'true'
		if (( ! is_silent_FLAG )); then
			if [[ -n "$server_error_message" ]]; then
				errcho "Server error: $server_error_message"
			else
				errcho "Server error, raw text: '$server_response'"
			fi
		fi
		return $(( exitcode_NOT_OK ))
	fi

	return $(( exitcode_OK ))

}

function upload_khs_ts_1h_to_server {
	#
	# Usage: upload_khs_ts_1h_to_server
	#

	# consts
	local -r this_miner_algo="${ASIC_ALGO:-N/A}"
	local -r jsonrpc_method='set_hashrates_data'

	# vars
	local server_request_JSON server_response
	local -i the_now seconds_passed_since_last_updated khs_ts_1h_FILE_last_updated_time
	local -i jq_exitcode curl_exitcode

	# code

	if [[ ! -s "$khs_ts_1h_FILE" ]]; then
		errcho "$khs_ts_1h_FILE is empty or not found. Nothing to upload"
		return $(( exitcode_NOT_OK ))
	fi

	khs_ts_1h_FILE_last_updated_time="$( get_file_last_modified_time_in_seconds "$khs_ts_1h_FILE" )"
	set_variable_to_current_system_time_in_seconds 'the_now'
	(( seconds_passed_since_last_updated = the_now - khs_ts_1h_FILE_last_updated_time ))

	if (( seconds_passed_since_last_updated > seconds_in_1h )); then
		errcho "$khs_ts_1h_FILE is older than 1 hour. It has no sense to upload a stale data"
		#rm "$khs_ts_1h_FILE"
		return $(( exitcode_NOT_OK ))
	fi

	# ok to upload
	source "$RIG_CONF"
	errcho "Uploading a backup (time series for $this_miner_algo), last modified $( seconds2dhms "$seconds_passed_since_last_updated" ) ago to $HIVE_HOST_URL"

	create_spinlock # critical section, we have to wait

	# shellcheck disable=SC2016
	server_request_JSON="$(
		jq																			\
			--raw-input --slurp --compact-output									\
			--arg		method			"${jsonrpc_method:-}"						\
			--argjson	rig_id			"${RIG_ID:-null}"							\
			--arg		passwd			"${RIG_PASSWD:-}"							\
			--arg		algo			"${this_miner_algo:-}"						\
			--argjson	last_updated	"${khs_ts_1h_FILE_last_updated_time:-null}"	\
																					\
			'split("\n") |															# split by newlines
				map( select( . != "" ) ) |											# get only non-empty lines
					{
						$method,
						"jsonrpc": "2.0",
						"id": 0,
						"params": {
							$rig_id,
							$passwd,
							"data": {
								($algo): {
									$last_updated,
									khs_ts_1h: [ .[] | try tonumber catch 0 ]		# try to convert strings to numbers then wrap them to an array
								}
							}
						}
					}
			' < "$khs_ts_1h_FILE"
	)"
	jq_exitcode=$?

	remove_spinlock

	if (( jq_exitcode )) || is_JSON_string_empty_or_null "$server_request_JSON"; then
		errcho "Cannot create a JSON request packet: '$server_request_JSON'"
		return $(( exitcode_NOT_OK ))
	fi

	# packet created ok, let's curl it
	server_response="$(
		curl																					\
			--insecure --location --data @- --connect-timeout 7 --max-time 15 --silent			\
			--request POST "$HIVE_HOST_URL/worker/api?id_rig=$RIG_ID&method=$jsonrpc_method"	\
			--header 'Content-Type: application/json'											\
		<<< "$server_request_JSON"
	)"
	curl_exitcode=$?

	is_api_server_response_ok "$curl_exitcode" "$server_response" || return $(( exitcode_NOT_OK ))

	errcho "Uploading complete, server response: '$server_response'"
}

function download_khs_ts_1h_from_server {
	#
	# Usage: download_khs_ts_1h_from_server
	#

	# consts
	local -r this_miner_algo="${ASIC_ALGO:-N/A}"
	local -r jsonrpc_method='get_hashrates_data'

	# vars
	local server_request_JSON server_response
	local result_data this_algo_data this_algo_name this_algo_last_updated_time this_algo_khs_ts_1h timestamp_for_touch
	local -i the_now seconds_passed_since_last_updated
	local -i jq_exitcode curl_exitcode

	# code
	source "$RIG_CONF"
	errcho "Downloading a backup (time series for $this_miner_algo) from $HIVE_HOST_URL"

	# shellcheck disable=SC2016
	server_request_JSON="$(
		jq													\
			--null-input --compact-output					\
			--arg		method		"${jsonrpc_method:-}"	\
			--argjson	rig_id		"${RIG_ID:-null}"		\
			--arg		passwd		"${RIG_PASSWD:-}"		\
															\
			'{
				$method,
				"jsonrpc": "2.0",
				"id": 0,
				"params": {
					$rig_id,
					$passwd,
				}
			}'
	)"
	jq_exitcode=$?

	if (( jq_exitcode )) || is_JSON_string_empty_or_null "$server_request_JSON"; then
		errcho "Cannot create a JSON request packet: '$server_request_JSON'"
		return $(( exitcode_NOT_OK ))
	fi

	# packet created ok, let's curl it
	server_response="$(
		curl																					\
			--insecure --location --data @- --connect-timeout 7 --max-time 15 --silent			\
			--request POST "$HIVE_HOST_URL/worker/api?id_rig=$RIG_ID&method=$jsonrpc_method"	\
			--header 'Content-Type: application/json'											\
		<<< "$server_request_JSON"
	)"
	curl_exitcode=$?

	is_api_server_response_ok "$curl_exitcode" "$server_response" || return $(( exitcode_NOT_OK ))

	result_data="$(					jq --compact-output		'.result.data'									<<< "$server_response" )"

	if is_JSON_string_empty_or_null "$result_data"; then
		errcho "Error. There's no '.result.data' in the server response: '$server_response'"
		return $(( exitcode_NOT_OK ))
	fi

	# result_data -> this_algo_data
	this_algo_data="$(				jq --compact-output		'. | to_entries | .[0]'							<<< "$result_data" )"

	# this_algo_data -> ...
	this_algo_name="$(				jq --raw-output			'.key'											<<< "$this_algo_data" )"
	this_algo_last_updated_time="$(	jq --raw-output			'.value.last_updated | try tonumber catch 0'	<<< "$this_algo_data" )"
	this_algo_khs_ts_1h="$(			jq --compact-output		'.value.khs_ts_1h | .[] | try tonumber catch 0'	<<< "$this_algo_data" )"

	set_variable_to_current_system_time_in_seconds 'the_now'
	(( seconds_passed_since_last_updated = the_now - this_algo_last_updated_time ))
	errcho "Downloading complete. A server-side backup was created $( seconds2dhms "$seconds_passed_since_last_updated" ) ago"

	if [[ "$this_miner_algo" != "$this_algo_name" ]]; then
		errcho "Backup algo '$this_algo_name' is not equal to this miner's algo '$this_miner_algo'. Backup will not be used"
		return $(( exitcode_NOT_OK ))
	fi

	# check which backup is younger: server's or local one
	if [[ -s "$khs_ts_1h_FILE" ]]; then
		khs_ts_1h_FILE_last_updated_time="$( get_file_last_modified_time_in_seconds "$khs_ts_1h_FILE" )"
	else
		khs_ts_1h_FILE_last_updated_time=0
	fi

	if (( khs_ts_1h_FILE_last_updated_time >= this_algo_last_updated_time )); then
		errcho "Server-side backup is older than a local one by $( seconds2dhms $(( khs_ts_1h_FILE_last_updated_time - this_algo_last_updated_time )) ). It has no sense to use it"
		return $(( exitcode_NOT_OK ))
	fi

	# check a server-side backup age
	if (( seconds_passed_since_last_updated > seconds_in_1h )); then
		errcho "Server-side backup is older than 1 hour. It has no sense to use it"
		return $(( exitcode_NOT_OK ))
	fi

	# ok to save
	printf -v timestamp_for_touch '%(%Y%m%d%H%M.%S)T' "$this_algo_last_updated_time"
	errcho "Writing a time series file $khs_ts_1h_FILE"

	create_spinlock # critical section, we have to wait
	echo "$this_algo_khs_ts_1h" > "$khs_ts_1h_FILE"
	errcho "Setting timestamp '$timestamp_for_touch'"
	touch -t "$timestamp_for_touch" "$khs_ts_1h_FILE" || errcho 'Something wrong with touch (unsupported -t option?)'
	remove_spinlock
}


# files

function get_lines_count_in_file {
	#
	# Usage: get_lines_count_in_file "file_to_count"
	#
	# pure bash alternative to wc -l
	# https://github.com/dylanaraps/pure-bash-bible#get-the-number-of-lines-in-a-file
	#
	# TODO should do profiling what's best -- this thing or the system binary

	# args
	(( $# <= 1 )) || { errcho 'only 0 or 1 argument allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r file_to_count="${1:-$( < /dev/fd/0 )}"

	# vars
	local -a lines_ARR

	# code
	if [[ -s "$file_to_count" ]]; then
		mapfile -tn 0 lines_ARR < "$file_to_count"
		printf '%s\n' "${#lines_ARR[@]}"
	elif [[ -f "$file_to_count" ]]; then
		errcho "$file_to_count is empty"
		printf '0\n'
	else
		errcho "$file_to_count not found"
		return $(( exitcode_NOT_OK ))
	fi
}

function get_last_n_lines_from_file {
	#
	# Usage: get_last_n_lines_from_file 'lines_to_tail' 'file_to_tail'
	#
	# pure bash alternative to tail -n
	# https://github.com/dylanaraps/pure-bash-bible#get-the-last-n-lines-of-a-file
	#
	# TODO should do profiling what's best -- this thing or the system binary

	# args
	(( $# <= 2 )) || { errcho 'only 1 or 2 arguments allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r lines_to_tail="$1"
	local -r file_to_tail="${2:-$( < /dev/fd/0 )}"

	# vars
	local -a lines_ARR
	local -i lines_count

	# code
	if [[ -s "$file_to_tail" ]]; then
		mapfile -tn 0 lines_ARR < "$file_to_tail"
		lines_count="${#lines_ARR[@]}"
		#errcho "$file_to_tail is $lines_count lines long, printing last $lines_to_tail"
		if (( lines_count <= lines_to_tail )); then
			printf '%s\n' "${lines_ARR[@]}"
		else
			printf '%s\n' "${lines_ARR[@]: -$lines_to_tail}"
		fi
	else
		errcho "$file_to_tail not found or empty"
		return $(( exitcode_NOT_OK ))
	fi
}

function prepend_n_0_lines_to_file {
	#
	# Usage: prepend_n_0_lines_to_file 'how_much_lines' 'file_to_process'
	#

	# args
	(( $# == 2 )) || { errcho 'only 2 arguments allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r -i how_much_lines="$1"
	local -r file_to_process="$2"

	# vars
	local -i line_counter

	# code
	if (( how_much_lines > 0 )); then
		errcho "Prepend $how_much_lines 0-lines to $file_to_process"
		# shellcheck disable=SC2094
		# bc I know what I am doing
		printf '%s%s' "$(
			for (( line_counter = 1; line_counter <= how_much_lines; line_counter++ )); do
				echo "$zero_hashrate_line"
			done
		)" "$( < "$file_to_process" )" > "$file_to_process"
	else
		errcho "ERROR: Invalid lines count $how_much_lines, skipping"
		return $(( exitcode_NOT_OK ))
	fi
}

function append_n_0_lines_to_file {
	#
	# Usage: append_n_0_lines_to_file 'how_much_lines' 'file_to_process'
	#

	# args
	(( $# == 2 )) || { errcho 'only 2 arguments allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r -i how_much_lines="$1"
	local -r file_to_process="$2"

	# vars
	local -i line_counter

	# code
	if (( how_much_lines > 0 )); then
		errcho "Append $how_much_lines 0-lines to $file_to_process"
		for (( line_counter = 1; line_counter <= how_much_lines; line_counter++ )); do
			echo "$zero_hashrate_line"
		done >> "$file_to_process"
	else
		errcho "ERROR: Invalid lines count $how_much_lines, skipping"
		return $(( exitcode_NOT_OK ))
	fi
}

function append_last_newline_if_not_exist {
	#
	# Usage: append_last_newline_if_not_exist 'file_to_process'
	#
	# preserves timestamp

	# args
	(( $# == 1 )) || { errcho 'only 1 argument allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r file_to_process="$1"

	# consts
	local -r dummy_FILE="$file_to_process.dummy"

	# code
	if tail -c 1 "$file_to_process" | read -r _; then
		# terminating newline does exist
		: ok good to go
	else
		errcho "$file_to_process has no newline at the end, appending..."

		# copy timestamp to dummy file
		touch -r "$file_to_process" "$dummy_FILE" || errcho "'touch -r $file_to_process $dummy_FILE' failed"

		# add newline
		echo >> "$file_to_process"

		# change timestamp back
		if touch -r "$dummy_FILE" "$file_to_process"; then
			rm -f "$dummy_FILE"
		else
			errcho "'touch -r $dummy_FILE $file_to_process' failed"
		fi
	fi
}

function prepare_khs_ts_1h_file {
	# vars
	local -i the_now the_now_minus_1hr
	local -i khs_ts_FILE_last_updated_time khs_ts_backup_FILE_last_updated_time seconds_passed_since_last_updated
	local -i khs_ts_FILE_lines_count how_much_gaps_missed_after how_much_zeroes_to_put_after how_much_gaps_missed_before
	local -a lines_ARR

	# code
	download_khs_ts_1h_from_server

	set_variable_to_current_system_time_in_seconds 'the_now'
	(( the_now_minus_1hr = the_now - seconds_in_1h ))

	if [[ ! -s "$khs_ts_1h_FILE" ]]; then
		errcho "$khs_ts_1h_FILE not found or empty, checking a local backup"
		if [[ -s "$khs_ts_1h_backup_FILE" ]]; then
			khs_ts_backup_FILE_last_updated_time="$( get_file_last_modified_time_in_seconds "$khs_ts_1h_backup_FILE" )"
			(( seconds_passed_since_last_updated = the_now - khs_ts_backup_FILE_last_updated_time ))
			if (( seconds_passed_since_last_updated <= seconds_in_1h )); then
				errcho "A local backup file $khs_ts_1h_backup_FILE found, restoring it back"
				cp -p "$khs_ts_1h_backup_FILE" "$khs_ts_1h_FILE" # -p preserves the timestamp
			else
				errcho "A local backup file $khs_ts_1h_backup_FILE found, but it's too old. Creating a new time series file $khs_ts_1h_FILE"
			fi
		else
			errcho "A local backup file $khs_ts_1h_backup_FILE not found or empty. Creating a new time series file $khs_ts_1h_FILE"
		fi
	fi

	if [[ -s "$khs_ts_1h_FILE" ]]; then # there are some time series in file
		append_last_newline_if_not_exist "$khs_ts_1h_FILE"

		khs_ts_FILE_last_updated_time="$( get_file_last_modified_time_in_seconds "$khs_ts_1h_FILE" )"
		mapfile -tn 0 lines_ARR < "$khs_ts_1h_FILE"
		khs_ts_FILE_lines_count="${#lines_ARR[@]}"

		# let's calculate how old they are
		((
			seconds_passed_since_last_updated = the_now - khs_ts_FILE_last_updated_time,

			how_much_gaps_missed_after = seconds_passed_since_last_updated / ts_1h_time_gap_in_s,
			how_much_zeroes_to_put_after = how_much_gaps_missed_after > time_gaps_count_in_1h ? time_gaps_count_in_1h : how_much_gaps_missed_after,

			how_much_gaps_missed_before = time_gaps_count_in_1h - ( khs_ts_FILE_lines_count + how_much_zeroes_to_put_after ),
			how_much_zeroes_to_put_before = how_much_gaps_missed_before > 0 ? how_much_gaps_missed_before : 0
		))

		errcho "seconds_passed_since_last_updated: $( seconds2dhms "$seconds_passed_since_last_updated" ), khs_ts_FILE_lines_count: $khs_ts_FILE_lines_count"
		errcho "how_much_gaps_missed_before: $how_much_gaps_missed_before, how_much_zeroes_to_put_before: $how_much_zeroes_to_put_before"
		errcho "how_much_gaps_missed_after: $how_much_gaps_missed_after, how_much_zeroes_to_put_after: $how_much_zeroes_to_put_after"

		if (( how_much_zeroes_to_put_before > 0 )); then # insert zeroes at the beginning of the khs_ts file
			prepend_n_0_lines_to_file "$how_much_zeroes_to_put_before" "$khs_ts_1h_FILE"
		fi

		if (( how_much_zeroes_to_put_after > 0 )); then # insert zeroes at the end of the khs_ts file
			append_n_0_lines_to_file "$how_much_zeroes_to_put_after" "$khs_ts_1h_FILE"
		fi

		if (( how_much_zeroes_to_put_before + khs_ts_FILE_lines_count + how_much_zeroes_to_put_after > time_gaps_count_in_1h )); then
			errcho "Truncating $(( how_much_zeroes_to_put_before + khs_ts_FILE_lines_count + how_much_zeroes_to_put_after )) lines to the last $time_gaps_count_in_1h lines"
			get_last_n_lines_from_file "$time_gaps_count_in_1h" "$khs_ts_1h_FILE" > "${khs_ts_1h_FILE}.tmp"
			mv "${khs_ts_1h_FILE}.tmp" "$khs_ts_1h_FILE" || errcho "error at $LINENO"
		fi
	else
		# no time series at all -- fill all with 0
		append_n_0_lines_to_file "$time_gaps_count_in_1h" "$khs_ts_1h_FILE"
	fi
}


# background handlers

function backup_khs_ts_1h {
	# code
	until [[ -s "$khs_ts_1h_FILE" ]]; do
		# wait for file
		errcho "> Waiting for $khs_ts_1h_FILE to appear..."
		snore 1
	done

	create_spinlock # critical section, we have to wait

	if cp "$khs_ts_1h_FILE" "$khs_ts_1h_backup_FILE"; then
		errcho "Backup $khs_ts_1h_FILE to $khs_ts_1h_backup_FILE OK"
	else
		errcho "Backup $khs_ts_1h_FILE to $khs_ts_1h_backup_FILE FAIL"
	fi

	remove_spinlock
}

function khs_ts_1h_loader {
	# vars
	local -i the_now khs_FILE_last_updated_time how_old_khs_FILE_in_s
	local actual_khs_value

	# code
	# 1. check how old is khs file
	set_variable_to_current_system_time_in_seconds 'the_now'
	khs_FILE_last_updated_time="$( get_file_last_modified_time_in_seconds "$khs_ts_1h_FILE" )"
	(( how_old_khs_FILE_in_s = the_now - khs_FILE_last_updated_time ))

	# 2. get khs if the file time looks relevant
	if (( how_old_khs_FILE_in_s <= 20 )); then # TODO should swap a hardcoded '20' to smth like PUSH_INTERVAL*2
		# khs file is actual, give or take
		actual_khs_value="$( < "$khs_FILE" )"
	fi

	# 3. check khs value
	is_JSON_string_empty_or_null "$actual_khs_value" && actual_khs_value="$zero_hashrate_line"

	errcho "Appending $khs_ts_1h_FILE with $actual_khs_value khs"

	# 4. write to tmp file
	{
		# 4.1 get the last lines within an hour minus 1
		get_last_n_lines_from_file $(( time_gaps_count_in_1h - 1 )) "$khs_ts_1h_FILE" # get the last n lines minus 1 (that's reserved for the last measurement)

		# 4.2 append the current khs
		echo "$actual_khs_value"
	} > "${khs_ts_1h_FILE}.tmp"

	create_spinlock # critical section, we have to wait
	mv "${khs_ts_1h_FILE}.tmp" "$khs_ts_1h_FILE" || errcho "mv error at $LINENO"
	remove_spinlock
}

function khs_ts_1h_aggregator {
	# vars
	local avg_15m avg_1h

	# code
	errcho "Calculating averages"

	create_spinlock # critical section, we have to wait
	avg_15m="$( get_last_n_lines_from_file "$time_gaps_count_in_15m" "$khs_ts_1h_FILE" | jq --slurp 'add / length' )"
	avg_1h="$( get_last_n_lines_from_file "$time_gaps_count_in_1h" "$khs_ts_1h_FILE" | jq --slurp 'add / length' )"
	remove_spinlock

	errcho "generate_avg_khs_json: $( generate_avg_khs_json "$avg_15m" "$avg_1h" | tee "$avg_khs_FILE" )"
}


# main

function run_in_interactive_mode {
	# consts
	local -r -i show_uptime_every_nth_minute=5

	# vars
	local -i the_now_in_s current_second current_minute
	local this_event

	# flags
	local -i is_halt_condition_FLAG=0

	# traps
	for this_event in SIGINT SIGTERM SIGHUP SIGQUIT SIGTSTP EXIT; do
		# shellcheck disable=SC2064
		# bc trap command format
		trap "trap '' $this_event; is_halt_condition_FLAG=1; errcho \"$this_event received, finishing...\"" "$this_event"
	done

	# code
	errcho 'Main cycle started, signal traps set'
	remove_spinlock # just to be sure is there a spinlock from the previous session
	prepare_khs_ts_1h_file

	start_bg_job execute_every_nth_second "$ts_1h_time_gap_in_s"		'khs_ts_1h_loader'
	start_bg_job execute_every_nth_second 61							'khs_ts_1h_aggregator'
	start_bg_job execute_every_nth_second "$upload_every_nth_second"	'upload_khs_ts_1h_to_server'
#	start_bg_job execute_every_nth_second "$backup_every_nth_second"	'backup_khs_ts_1h'

	SECONDS=0

	until (( is_halt_condition_FLAG )); do
		set_variable_to_current_system_time_in_seconds 'the_now_in_s'

		if ((
			current_minute = the_now_in_s / 60 % 60,
			current_second = the_now_in_s % 60,
			current_second == 0 && current_minute % show_uptime_every_nth_minute == 0
		)); then
			# print uptime every_nth_minute at 00s
			errcho "Uptime $( seconds2dhms "$SECONDS" )"
		fi

		if (( is_halt_condition_FLAG )); then
			# finish almost immediately (if signal's fired)
			break
		else
			( snore 1 ) # sub-shell for DEBUG
		fi
	done

	stop_bg_job "execute_every_nth_second $ts_1h_time_gap_in_s khs_ts_1h_loader"
	stop_bg_job 'execute_every_nth_second 61 khs_ts_1h_aggregator'
	stop_bg_job "execute_every_nth_second $upload_every_nth_second upload_khs_ts_1h_to_server"
#	stop_bg_job 'backup_khs_ts_1h'

	wait || errcho 'Caught another signal while finishing the handlers'
	remove_spinlock

	errcho 'Main cycle finished'
	trap - SIGINT SIGTERM SIGHUP SIGQUIT SIGTSTP EXIT
	errcho 'Signal traps cleared'
}


# global sources

source colors
source asic-model


# global consts

# Client config
declare -r RIG_CONF_default='/hive-config/rig.conf'
declare -r RIG_CONF="${RIG_CONF:-$RIG_CONF_default}" # for ASIC emulator: set to default only if RIG_CONF variable is empty

# dirs
declare -r work_directory='/run/hive'
declare -r backup_directory='/hive-config'

# filenames
declare -r khs_file_name='khs'
declare -r avg_khs_file_name='khs_avg' # TODO should add an algo to the name like in the GPU domain?
declare -r khs_ts_1h_file_name='khs_ts_1h' # TODO should add an algo to the name like in the GPU domain?

# full-qualified derivatives
declare -r khs_FILE="$work_directory/$khs_file_name"
declare -r avg_khs_FILE="$work_directory/$avg_khs_file_name"
declare -r khs_ts_1h_FILE="$work_directory/$khs_ts_1h_file_name"
declare -r khs_ts_1h_lock_FILE="$work_directory/$khs_ts_1h_file_name.lock"
declare -r khs_ts_1h_backup_FILE="$backup_directory/$khs_ts_1h_file_name"

# times/frequencies
declare -r -i ts_1h_time_gap_in_s=10 # get the hashrate every 10th second

declare -r -i seconds_in_minute=60
declare -r -i seconds_in_1h=$(( 60 * seconds_in_minute ))
declare -r -i seconds_in_15m=$(( 15 * seconds_in_minute ))

declare -r -i upload_every_nth_minute=10 # upload frequency
declare -r -i upload_every_nth_second=$(( upload_every_nth_minute * seconds_in_minute ))

declare -r -i backup_every_nth_minute=5 # backup frequency (backups disabled atm)
# shellcheck disable=SC2034
# bc backup functions not used atm
declare -r -i backup_every_nth_second=$(( backup_every_nth_minute * seconds_in_minute ))

declare -r -i time_gaps_count_in_15m=$(( seconds_in_15m / ts_1h_time_gap_in_s ))
declare -r -i time_gaps_count_in_1h=$(( seconds_in_1h / ts_1h_time_gap_in_s ))

# other
declare -r zero_hashrate_line='0' # could it be '' (just newline) for the sake of the lesser file size? NOTE: '' will conflict with upload func
declare -r debug_log_FILE="/tmp/${script_basename}-debug.log"
declare -r screen_hardcopy_log_FILE="/tmp/${script_basename}.log"
declare -r -i screen_hardcopy_log_lines=300


# globas vars

declare -i script_exitcode=0


# code

print_script_version

case "${1-}" in
	'')
		if is_screen_session_exist; then
			# shellcheck disable=SC2119
			# bc of the defaults
			screen_session_attach
		else
			# shellcheck disable=SC2119
			# bc of the defaults
			screen_session_start
			# shellcheck disable=SC2119
			# bc of the defaults
			screen_session_attach # attach will happen only in interactive shell, otherwise skipped
		fi
	;;

	'start')
		# shellcheck disable=SC2119
		# bc of the defaults
		screen_session_start
	;;

	'stop')
		# shellcheck disable=SC2119
		# bc of the defaults
		screen_session_stop
	;;

	'restart')
		# shellcheck disable=SC2119
		# bc of the defaults
		screen_session_stop
		# shellcheck disable=SC2119
		# bc of the defaults
		screen_session_start
	;;

	'interactive')
		run_in_interactive_mode
	;;

	'log')
		# shellcheck disable=SC2119
		# bc of the defaults
		screen_session_log
		script_exitcode=$?
	;;

	'-h'|'--help'|*)
		print_script_usage
	;;
esac

echo

exit $(( script_exitcode ))
