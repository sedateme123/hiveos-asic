#!/hive/sbin/bash


#
# Copyright (C) 2017  Hiveon Holding LTD
# Distributed under Business Source License 1.1
# License information can be found in the LICENSE.txt file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#
# Linted by shellcheck 0.7.0
#


readonly script_mission='Client for ASICs: Check for known Antminer viruses'
readonly script_version='0.7.4'
readonly script_basename="${0##*/}"
#
readonly script_DEBUG="${script_DEBUG:-0}" # use value from env if exists


# !!! bash strict mode, no unbound variables
set -o nounset


# functions

function print_script_usage {
	# code
	echo -e "Usage: ${CYAN-}${script_basename} [--nocolor] [-s|--silent]${NOCOLOR-}"
	echo
	echo -e "  ${WHITE-}--nocolor${NOCOLOR-}       b/w mode"
	echo -e "  ${WHITE-}-s${NOCOLOR-}, ${WHITE-}--silent${NOCOLOR-}    prints nothing, returns exit code"
	echo
}

function parse_arguments {
	# vars
	local this_ARG

	# code
	for this_ARG in "$@"; do
		case "$this_ARG" in
			'--audit')
				print_i_am_doing_fine_then_exit
				;;
			'--nocolor')
				is_colors=0
				;;
			'-s' | '--silent')
				is_silent=1
				;;
			'-h' | '--help' | *)
				source /hive/bin/colors
				print_script_version
				print_script_usage
				# shellcheck disable=SC2154
				exit $(( exitcode_OK ))
				;;
		esac
	done
}

function pretty_print {
	(( is_silent )) && return

	# args
	# shellcheck disable=SC2154
	(( $# > 4 )) && { errcho 'invalid number of arguments'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r label_color="${1-}"
	local -r label_text="${2-}"
	local -r message_color="${3-}"
	local -r message_text="${4-}"

	# code
	printf "%b%${label_format}s %b%s%b\n" "$label_color" "$label_text" "$message_color" "$message_text" "${NOCOLOR-}"
}

function pretty_table_header {
	(( is_silent )) && return

	# args
	(( $# > 2 )) && { errcho 'invalid number of arguments'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local label_text=''
	local -r message_color="${2-${GRAY-}}"
	local -r message_text="${1-}"

	# code
	echo
	pretty_print '' '' "$message_color" "$message_text"
	echo
}

function pretty_table_row {
	(( is_silent )) && return

	# args
	(( $# > 3 )) && { errcho 'invalid number of arguments'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r label_text="${1-}"
	local -r message_color="${2-}"
	local -r message_text="${3-}"

	# code
	pretty_print '' "$label_text" "$message_color" "$message_text"
}

function get_md5sum_of_file {
	# args
	(( $# == 1 )) || { errcho 'invalid number of arguments'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r file_to_hash="${1-}"

	# vars
	local -a md5_string_array=()

	# code
	if is_program_in_the_PATH 'md5sum'; then
		md5_string_array=( $( md5sum "$file_to_hash" ) )
		echo "${md5_string_array[0]}"
	else
		errcho 'md5sum not found'
	fi
}

function check_ntpd_size {
	# consts
	local -r label_text='ntpd size'
	local -r ntpd_file='/usr/bin/ntpd'

	# vars
	local -i ntpd_size=0

	# code
	if [[ -s "$ntpd_file" ]]; then
		ntpd_size="$( get_file_size_in_bytes "$ntpd_file" )"
		#if cksum /usr/bin/ntpd  | grep -q '892955227 358832 /usr/bin/ntpd'; then # T9+
		if (( ntpd_size < 500000 )); then
			pretty_table_row "$label_text" "${GREEN-}" "looks OK (size $ntpd_size is less than 0.5 Mb)"
		else
			pretty_table_row "$label_text" "${BYELLOW-}" "very suspicious! Size $ntpd_size is greater than 0.5 Mb"
			set_bits_by_mask audit_status status_WARNING
		fi
	# K.I.S.S.
	#else
		#pretty_table_row "$label_text" "${GRAY-}" "/usr/bin/ntpd not found (it's ok)"
	fi
}

function check_nightswitcher {
	# consts
	local -r label_text='Nightswitcher'

	# code
	if [[ -e /config/bNminer.conf ]]; then
		pretty_table_row "$label_text" "${BRED-}" 'virus signature found: /config/bNminer.conf'
		set_bits_by_mask audit_status status_DANGER
	else
		pretty_table_row "$label_text" "${GREEN-}" 'not found'
	fi
}

function check_antbuild_NOT_USED { # not used
	# consts

	local -r label_text='Antbuild'

	# vars
	local -i status_bitmask
	local message_color

	# code
	if (( IS_ASIC_CUSTOM_FW )); then
		status_bitmask=$(( status_WARNING ))
		message_color="${BYELLOW-}"
	else
		status_bitmask=$(( status_DANGER ))
		message_color="${BRED-}"
	fi

	if [[ -e /etc/ld.so.preload || -e /usr/bin/build || -e /usr/bin/egrep ]]; then
		# old1
		pretty_table_row "$label_text" "$message_color" 'v2 (uncured) found'
		set_bits_by_mask audit_status status_bitmask
	else
		if [[ -s /lib/modules/bitmain_axi.ko ]] && cksum /lib/modules/bitmain_axi.ko | grep -q '1596665532 7415 /lib/modules/bitmain_axi.ko'; then
				# old2
				pretty_table_row "$label_text" "$message_color" 'v1 (cured) found'
				set_bits_by_mask audit_status status_bitmask
		else
			# shellcheck disable=SC2076
			if [[ "$( uname -r )" =~ 'g16220c3' ]]; then
				# new
				pretty_table_row "$label_text" "$message_color" 'v2 found'
				set_bits_by_mask audit_status status_bitmask
			else
				pretty_table_row "$label_text" "${GREEN-}" 'not found'
			fi
		fi
	fi
}

function check_antbuild {
	# consts
	local -r label_text='Antbuild'

	# vars
	local -i status_bitmask
	local message_color custom_fw_specific_message

	# code
	if (( IS_ASIC_CUSTOM_FW )); then
		status_bitmask=$(( status_WARNING ))
		message_color="${BYELLOW-}"
		custom_fw_specific_message="Virus blocked by $ASIC_CUSTOM_FW_BRAND firmware."
	else
		# shellcheck disable=SC2034
		status_bitmask=$(( status_DANGER ))
		message_color="${BRED-}"
		custom_fw_specific_message=''
	fi

	# old1
	if [[ -e /etc/ld.so.preload || -e /usr/bin/build || -e /usr/bin/egrep ]]; then
		pretty_table_row "$label_text" "$message_color" "v2 (uncured) found. $custom_fw_specific_message"
		set_bits_by_mask audit_status status_bitmask
	fi

	if [[ "$ASIC_MODEL" == 'Antminer S9'* && "$ASIC_CUSTOM_FW_VERSION" == '1.02' ]]; then

		# old2
		if is_program_in_the_PATH 'cksum'; then
			if [[ -s /lib/modules/bitmain_axi.ko ]] && cksum /lib/modules/bitmain_axi.ko | grep -q '1596665532 7415 /lib/modules/bitmain_axi.ko'; then
				pretty_table_row "$label_text" "$message_color" "v1 (cured) found. $custom_fw_specific_message"
				set_bits_by_mask audit_status status_bitmask
			fi
		fi

		# new
		# shellcheck disable=SC2076
		if [[ "$( uname -r )" =~ 'g16220c3' ]]; then
			pretty_table_row "$label_text" "$message_color" "v2 found. $custom_fw_specific_message"
			set_bits_by_mask audit_status status_bitmask
		fi

	fi

	if (( ! audit_status )); then
		pretty_table_row "$label_text" "${GREEN-}" 'not found'
	fi
}

function check_bitmsfser_info {
	# consts
	local -r label_text='bitmsfser.info'
	local -r virus_signature='bitmsfser.info'

	# code
	if grep -Fqsm 1 "$virus_signature" /etc/hosts; then
		pretty_table_row "$label_text" "${BRED-}" 'virus signature found in /etc/hosts'
		set_bits_by_mask audit_status status_DANGER
	else
		pretty_table_row "$label_text" "${GREEN-}" 'not found'
	fi
}

function check_for_suspicious_files {
	# consts
	local -r label_text='suspicious file'
	local -r persistent_storage_file_name="/hive-config/${script_basename}.list"
	local -r -a suspicious_files_list=(
		'/config/.antminers'
		'/usr/antfalg'
		'/usr/antfalgZ'
		'/usr/bin/antminers'
		'/nvdata/.shadow'
	)

	# vars
	local -a list_from_persistent_storage_indexed=()
	local -A list_from_persistent_storage_hash=()
	local -i deleted_counter=0 zombie_counter=0
	local this_file

	# code
	# load list of previously discovered files from a persistent storage
	if [[ -f "$persistent_storage_file_name" ]]; then
		readarray -t list_from_persistent_storage_indexed < "$persistent_storage_file_name"
		for this_file in "${list_from_persistent_storage_indexed[@]}"; do
			list_from_persistent_storage_hash["$this_file"]=1
		done
	fi

	for this_file in "${suspicious_files_list[@]}"; do
		# had this file being discovered (and then deleted) earlier?
		if (( ${list_from_persistent_storage_hash[${this_file}]-0} > 0 )); then
			# yes, it was deleted. does it still exist?
			if [[ -e "$this_file" ]]; then
				# yes. wow it came back from the dead! definitely a virus.
				pretty_table_row "$label_text" "${BYELLOW-}" "$this_file was deleted earlier but showed up again. Delete again..."
				# TODO proactive measures: do truncate and chmod?
				rm -rf "$this_file" || pretty_table_row '' "${BRED-}" "$this_file deleting error"
				(( zombie_counter++ ))
			fi
		else
			# no, it not on the list
			if [[ -e "$this_file" ]]; then
				# first time discover
				pretty_table_row "$label_text" "${GREEN-}" "$this_file found, deleting..."
				rm -rf "$this_file" || pretty_table_row '' "${BRED-}" "$this_file deleting error"
				# add the name to a persistent storage
				echo "$this_file" >> "$persistent_storage_file_name"
				(( deleted_counter++ ))
			fi
		fi
	done

	(( zombie_counter )) && set_bits_by_mask audit_status status_WARNING
	# K.I.S.S.
	#(( deleted_counter )) && pretty_table_row '' "${YELLOW-}" "$deleted_counter found and deleted"
	! (( zombie_counter || deleted_counter )) && pretty_table_row "$label_text" "${GREEN-}" 'not found'
}

function check_system_files {
	# consts
	local -r label_text='system file md5'
	local -r -A files_to_check=(
		['/usr/bin/ntpd']='bb965c01fbba97604b94813fcdaa0829 94699039a78b6ee320b2e1a5c436527a e5b8378fc39c16f4adbf0503fa988d6f e7d50aa47ac3414d978a0e761c55a50c'
		#                                                   ^ Z11e stock                                                      ^ Z9 stock (not tested) @ 180913
		['/lib/modules/bitmain_axi.ko']='e78d5effe8c1e4afd1cf514ba23844d1 f552505dcf1e7c61be414a40d6352684 27a0a0bfeee0d919ef03ba534caab51c f2517c6f9554babeb1cfca7ac55aed2d 5d00a362d368efc009dd79aa53723a0d'
		#                                ^ S9 Hiveon 1.02/1.03, T9 Hiveon 1.03
		#                                                                 ^ S17/S17 Pro/S17E Hiveon
		#                                                                                                  ^ T9 1.02@190810
		#                                                                                                                                   ^ Z11e stock @ 191023
		#                                                                                                                                                                    ^ Series 19 Hiveon
	)

	# vars
	local this_file_name this_file_size this_file_md5

	# code
	for this_file_name in "${!files_to_check[@]}"; do
		if [[ -f "$this_file_name" ]]; then
			this_file_size="$( get_file_size_in_bytes "$this_file_name" )"
			this_file_md5="$( get_md5sum_of_file "$this_file_name" )"
			if [[ -z "$this_file_md5" || "${#this_file_md5}" != 32 ]]; then
				pretty_table_row "$label_text" "${BRED-}" "$this_file_name ($this_file_size bytes) has INVALID md5: '$this_file_md5'"
			elif [[ "${files_to_check[$this_file_name]}" == *"$this_file_md5"* ]]; then
				pretty_table_row "$label_text" "${GREEN-}" "$this_file_name OK"
			else
				pretty_table_row "$label_text" "${BRED-}" "$this_file_name ($this_file_size bytes) has UNKNOWN md5: '$this_file_md5'"
				set_bits_by_mask audit_status status_WARNING
			fi
		fi
	done
}

function check_uname_and_kernel_match {
	# consts
	local -r label_text='kernel version'
	local -A valid_fw_version_kernel_version_pairs_DICT=(
		    ["Antminer S9 $ASIC_CUSTOM_FW_BRAND 1.02@191120"]='3.14.0-xilinx-ga36f3af-dirty'
		    ["Antminer T9 $ASIC_CUSTOM_FW_BRAND 1.03@200818"]='3.14.0-xilinx-ga36f3af-dirty'
		    ["Antminer T9 $ASIC_CUSTOM_FW_BRAND 1.03@200901"]='3.14.0-xilinx-ga36f3af-dirty'
		    ["Antminer T17 $ASIC_CUSTOM_FW_BRAND 2.02@200917"]='4.6.0-xilinx-gff8137b-dirty'
		    ["Antminer T17 $ASIC_CUSTOM_FW_BRAND 2.02@200923"]='4.6.0-xilinx-gff8137b-dirty'
		   ["Antminer S17E $ASIC_CUSTOM_FW_BRAND 1.00@200403"]='4.6.0-xilinx-gff8137b-dirty'
		["Antminer S17 Pro $ASIC_CUSTOM_FW_BRAND 2.00@200608"]='4.6.0-xilinx-gff8137b-dirty'
	)

	# vars
	local dict_key uname_from_dict uname_actual

	# code
	if (( IS_ASIC_CUSTOM_FW )); then
		dict_key="$ASIC_MODEL $ASIC_CUSTOM_FW_VERSION_RAW" # f.e. 'Antminer T9 Hiveon 1.03@200818'
		uname_from_dict="${valid_fw_version_kernel_version_pairs_DICT[$dict_key]-}"
		if [[ -n "$uname_from_dict" ]]; then
			uname_actual="$( uname -r )"
			if [[ "$uname_actual" != "$uname_from_dict" ]]; then
				pretty_table_row "$label_text" "${BYELLOW-}" "WRONG (is '$uname_actual' but must be '$uname_from_dict')"
				set_bits_by_mask audit_status status_WARNING
			else
				pretty_table_row "$label_text" "${GREEN-}" 'matched'
			fi
		fi
	fi
}

function print_etc_hosts {
	(( is_silent )) && return

	# code
	echo -e -n "${GRAY-}"
	cat /etc/hosts
	echo -e -n "${NOCOLOR-}"
}

function print_summary {
	(( is_silent )) && return

	# code
	if (( audit_status == status_OK)); then
		pretty_table_row 'ASIC STATUS' "${BGREEN-}" 'OK'
	elif (( audit_status == status_WARNING )); then
		pretty_table_row 'ASIC STATUS' "${BYELLOW-}" 'VULNERABLE'
	else
		pretty_table_row 'ASIC STATUS' "${BRED-}" 'IN DANGER'
	fi
}


# global consts

declare -r label_format='15.15'
declare -r -i status_OK=0
declare -r -i status_WARNING=$(( 10#01 )) # 10#1
declare -r -i status_DANGER=$(( 10#10 )) # 10#2, status_DANGER+status_WARNING=3


# global sources

source /hive/bin/asic-model
source /hive/bin/hive-functions.sh


# global vars

declare -i audit_status=$(( status_OK ))
declare -i is_silent=0
declare -i is_colors=1


# main()

parse_arguments "$@"

if (( ! is_silent )); then
	(( is_colors )) && source /hive/bin/colors
	print_script_version
fi

case "${ASIC_MANUFACTURER-}" in
	'Bitmain')
		pretty_table_row 'model' "${WHITE-}" "$ASIC_MODEL ($ASIC_MANUFACTURER)"
		(( IS_ASIC_CUSTOM_FW )) && pretty_table_row 'version' "${WHITE-}" "$ASIC_CUSTOM_FW_BRAND $ASIC_CUSTOM_FW_VERSION_RAW"
		pretty_table_header 'KNOWN VIRUSES CHECK'
		check_antbuild
		check_bitmsfser_info
		check_nightswitcher

		pretty_table_header 'SUSPICIOUS ITEMS CHECK'
		check_uname_and_kernel_match
		check_ntpd_size
		check_system_files
		check_for_suspicious_files

		pretty_table_header 'SUMMARY'
		print_summary

		pretty_table_header
		pretty_table_header 'TECHNICAL DETAILS FOR SUPPORT'
		pretty_table_header '/etc/hosts'
		print_etc_hosts
		;;
	*)
		pretty_table_header "Antminer not detected (${ASIC_MANUFACTURER-undefined} ${ASIC_MODEL-undefined}), exiting..."
		;;
esac

exit $(( audit_status ))


#
# md5 library
#

S9 Hiveon 1.02/S9 msk 5.1
bb965c01fbba97604b94813fcdaa0829  /usr/bin/ntpd 358832 bytes
e78d5effe8c1e4afd1cf514ba23844d1  /lib/modules/bitmain_axi.ko
3.14.0-xilinx-ga36f3af-dirty  uname -r

T17 stock/T17 Hiveon 2.00/S17e Hiveon 1.00/S17 Hiveon 2.00/Z11 stock
94699039a78b6ee320b2e1a5c436527a  /usr/bin/ntpd 447336 bytes
f552505dcf1e7c61be414a40d6352684  /lib/modules/bitmain_axi.ko
4.6.0-xilinx-gff8137b-dirty  uname -r

T9 Hiveon 1.02
bb965c01fbba97604b94813fcdaa0829  /usr/bin/ntpd 358832 bytes
27a0a0bfeee0d919ef03ba534caab51c  /lib/modules/bitmain_axi.ko
3.14.0-xilinx-gb190cb0-dirty  uname -r

S9 msk 5.0
bb965c01fbba97604b94813fcdaa0829  usr/bin/ntpd
27a0a0bfeee0d919ef03ba534caab51c  lib/modules/bitmain_axi.ko
???  uname -r

T9 Hiveon 1.03
bb965c01fbba97604b94813fcdaa0829  /usr/bin/ntpd 358832 bytes
27a0a0bfeee0d919ef03ba534caab51c  /lib/modules/bitmain_axi.ko
3.14.0-xilinx-g16220c3  uname -r
Antminer T9 Hiveon 1.03@200818 == 3.14.0-xilinx-ga36f3af-dirty
antbuild stock kernel ==          3.14.0-xilinx-gb190cb0-dirty

L3+ Hiveon 1.00
e5b8378fc39c16f4adbf0503fa988d6f  /usr/bin/ntpd 447336 bytes
—  /lib/modules/bitmain_axi.ko
3.8.13  uname -r
