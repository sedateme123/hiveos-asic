#!/hive/sbin/bash


#
# Copyright (C) 2017  Hiveon Holding LTD
# Distributed under Business Source License 1.1
# License information can be found in the LICENSE.txt file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#
# Linted by shellcheck 0.7.0
#


readonly script_mission='Client for ASICs: The Messenger'
readonly script_version='0.7.3'
readonly script_basename="${0##*/}"
#
readonly script_DEBUG="${script_DEBUG:-0}" # use value from env if exists
#
[[ -s /hive/bin/hive-functions.sh ]] || { echo 'ERROR: /hive/bin/hive-functions.sh not found'; exit 1; } # assert
source /hive/bin/hive-functions.sh


# !!! bash strict mode, no unbound variables
set -o nounset


# functions

function errcho			{ echo -e "${RED-}${script_basename}>${NOCOLOR-} ${*}${NOCOLOR-}"; } 1>&2
function echo_info		{ echo -e "${LGRAY-}${script_basename}>${NOCOLOR-} ${*}${NOCOLOR-}"; }

function print_script_usage {
	echo -e '  Usage:'
	echo
	echo -e "    ${CYAN}$script_basename success|danger|warning|info \"text\" [OPTIONS]${NOCOLOR}    send a text message to the dashboard"
	echo -e "    ${CYAN}$script_basename ok|error|err|warn|default   \"text\" [OPTIONS]${NOCOLOR}    (alternative aliases)"
	echo
	echo -e "    ${CYAN}$script_basename file /path/filename [OPTIONS]${NOCOLOR}                      send a file to the dashboard"
	echo -e "    ${CYAN}$script_basename file.io|transfer.sh /path/filename [OPTIONS]${NOCOLOR}       send a file to the file sharing service"
	echo
	echo -e "    ${CYAN}$script_basename tag \"text\" [OPTIONS]${NOCOLOR}                           tag a worker with any text"
	echo
	echo -e '  Options:'
	echo
	echo -e "    ${CYAN}-e${NOCOLOR}, ${CYAN}--escape-templates${NOCOLOR}    do not expand Client templates (like %IP%) in a message header"
	echo -e "    ${CYAN}--header=your_header${NOCOLOR}      use a custom message header: 'message file /var/log/log --header=kernel.log'"
	echo -e "    ${CYAN}-i=msg_id${NOCOLOR}, ${CYAN}--id=msg_id${NOCOLOR}    add msg_id to a message (mostly used in 'agent' script)"
	echo -e "    ${CYAN}--payload${NOCOLOR}                 add a \"payload\" JSON key to a message (payload content is read from stdin)"
	echo -e "    ${CYAN}-s${NOCOLOR}, ${CYAN}--silent${NOCOLOR}              silent mode, report only errors"
	echo -e "    ${CYAN}-v${NOCOLOR}, ${CYAN}--verbose${NOCOLOR}             verbose mode, show request & response"
	echo
	echo -e '  Supported templates in the text:'
	echo
	echo -e "    %BUILD%, %FW%, %HOSTNAME%, %IP%, %MAC%, %PROFILE%, %URL%, %WORKER_NAME%, %WORKER_NAME_RAW%"
	echo -e "    Also you can append a suffix _SAFE or _SAFEST to the template to sanitize an expanded template content, f.e. %MAC_SAFE%"
	echo
}

function is_api_server_response_ok {
	#
	# Usage: is_api_server_response_ok 'response_to_check'
	#

	# args
	local -r response_to_check="$1"

	# vars
	local error_key errors_key

	# code
	if [[ -n "$response_to_check" ]]; then
		(( script_DEBUG )) && errcho "[DEBUG] $FUNCNAME(): server response not empty"
	else
		echo 'Server response is empty'
		return 1
	fi

	if error_key="$( jq '.error' --raw-output <<< "$response_to_check" 2> /dev/null )"; then
		# by the way, does the .error key deprecated? should prove it
		(( script_DEBUG )) && errcho "[DEBUG] $FUNCNAME(): server response is a valid JSON (check for .error key)"
	else
		echo 'Server response is not a valid JSON'
		return 1
	fi

	if errors_key="$( jq 'if .errors.type != null then .errors.type[] else null end' --raw-output <<< "$response_to_check" 2> /dev/null )"; then
		(( script_DEBUG )) && errcho "[DEBUG] $FUNCNAME(): server response is a valid JSON (check for .errors key)"
	else
		echo 'Server response is not a valid JSON'
		return 1
	fi

	if is_JSON_string_empty_or_null "$error_key" && is_JSON_string_empty_or_null "$errors_key"; then
		(( script_DEBUG )) && errcho "[DEBUG] $FUNCNAME(): server response has no .error(s) keys"
	else
		#is_JSON_string_not_empty_or_null "$error_key"	&& errcho "API server response 'error': $error_key"
		#is_JSON_string_not_empty_or_null "$errors_key"	&& errcho "API server response 'errors': $errors_key"
		echo 'API error'
		return 1
	fi

	return 0
}

function is_https_allowed {
	# code
	[[ -f "$https_semaphore_flag_FILE" ]]
}

function grab_exit_code_to_flag { local -r -i incoming_exitcode="$?" # must be the first command in the function to appropriately catch the exit code
	#
	# Usage: grab_exit_code_to_flag 'variable_by_ref'
	#

	# args
	local -r -n variable_by_ref="$1"

	# code
	if (( incoming_exitcode == 0 )); then
		variable_by_ref=1
	else
		# shellcheck disable=SC2034
		# bc by ref
		variable_by_ref=0
	fi

	return "$incoming_exitcode" # pass on the exit code (let's be completely exitcode-transparent like in pipes)
}

function get_curl_cmdline {
	if (( is_https_allowed_FLAG )); then
		printf '%s' "curl --cacert ${ca_cert_FILE} "
	else
		printf '%s' "curl --insecure "
	fi
}

# global consts

declare -r RIG_CONF_default='/hive-config/rig.conf'
declare -r RIG_CONF="${RIG_CONF:-$RIG_CONF_default}" # for ASIC emulator: set to default only if RIG_CONF variable is empty
declare -r API_HOST_FILE='/run/hive/api_host_url' # an accessory file for the /hive/bin/message and /hive/bin/hello
declare -r https_semaphore_flag_FILE="/run/hive/https-supported.flag"
declare -r ca_cert_FILE='/etc/ssl/certs/ca-certificates.crt'

# global vars

declare this_argument
declare message_type message_header message_color
declare id='' id_json payload='' payload_json
declare api_server_request api_server_response
declare file_to_send='' file_size
declare -i curl_exitcode script_exitcode=0
declare -i is_silent_FLAG=0 is_verbose_FLAG=0 is_templates_escaped_FLAG=0
declare console_message=''
declare -i is_https_allowed_FLAG=0


# global exports

[[ ! "$PATH" =~ (^|:)/hive/bin:/hive/sbin(:|$) ]] && export PATH="${PATH}${PATH:+:}/hive/bin:/hive/sbin" # add only if not exist, also cover a rare case with an empty PATH
[[ ! "$LD_LIBRARY_PATH" =~ (^|:)/hive/lib(:|$) ]] && export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}${LD_LIBRARY_PATH:+:}/hive/lib" # save $LD_LIBRARY_PATH:/hive/share/S9/lib for hiveon


# global sources

source /hive/bin/colors


# main

# asserts
[[ -s "$RIG_CONF" ]] || { errcho "Config file $RIG_CONF empty or not found"; exit 1; }

source "$RIG_CONF"

[[ -s "$API_HOST_FILE" ]] && source "$API_HOST_FILE" # load a relevant HIVE_HOST_URL variable

# process first two arguments
message_type="${1-}"
message_header="${2-}"

if [[ "$message_type" == '--help' || -z "$message_type" || -z "$message_header" ]]; then
	print_script_version
	print_script_usage
	exit 1
fi

case "$message_type" in
	'error'|'err')
		message_type='danger'
		message_color="$RED"
	;;

	'warning'|'warn')
		message_type='warning'
		message_color="$YELLOW"
	;;

	'ok'|'success')
		message_type='success'
		message_color="$GREEN"
	;;

	'tag')
		message_color="$PURPLE"
	;;

	'file')
		file_send_method="$message_type"
		file_to_send="$message_header"
		message_header="${file_to_send##*/}" # get basename
	;;

	'file.io'|'transfer.sh')
		file_send_method="$message_type"
		file_to_send="$message_header"
		message_header="${file_to_send##*/}" # get basename
		message_type='default'
	;;

	*)
		message_color="$CYAN"
	;;
esac

# process arguments starting from 3rd
for this_argument in "${@:3}"; do
	case "$this_argument" in
		'-e'|'--escape-templates')
			is_templates_escaped_FLAG=1
		;;

		'-i='*|'--id='*)
			id="${this_argument#*=}"
		;;

		'payload'|'--payload')
		#^^^^^^^ option without '--' is deprecated
			payload="$( < /dev/stdin )"
		;;

		'--header='*)
			message_header="${this_argument#*=}"
		;;

		'-s'|'--silent')
			is_silent_FLAG=1
		;;

		'-v'|'--verbose')
			is_verbose_FLAG=1
		;;

		*)
			errcho "unknown option '$this_argument'"
		;;
	esac
done

# try to expand templates in the message header
[[ -n "$message_header" ]] && (( ! is_templates_escaped_FLAG )) && expand_hive_templates_in_variable_by_ref 'message_header'

# check https, set flag
is_https_allowed; grab_exit_code_to_flag 'is_https_allowed_FLAG'
curl_protocol="$( get_curl_cmdline )"

# send file
if [[ -n "$file_to_send" ]]; then
	# if a regular file isn't empty OR
	# it's a named pipe -- for <() redirections like 'message file <( ./script )' OR
	# it's a character device like /dev/fd/*
	if [[ -s "$file_to_send" || -p "$file_to_send" || -c "$file_to_send" ]]; then
		file_size="$( get_file_size_in_bytes "$file_to_send" )"
		console_message="Sending $file_to_send (${file_size} bytes) to $file_send_method..."
		case "$file_send_method" in

			'file')
				payload="$( gzip -c9 < "$file_to_send" | openssl base64 -e -A 2> /dev/null )"
			;;

			'file.io')
				filesharing_server_response="$( ${curl_protocol} --form "file=@$file_to_send" --silent https://file.io )"
				curl_exitcode=$?
				if (( curl_exitcode )); then
					errcho "$console_message ${BRED}NETWORK ERROR ($curl_exitcode)${NOCOLOR}"
					(( is_verbose_FLAG )) && errcho "$( human-curl-error "$curl_exitcode" )"
					script_exitcode="$curl_exitcode"
				else
					file_io_success="$( jq --raw-output '.success' <<< "$filesharing_server_response" )"
					if [[ "$file_io_success" == 'true' ]]; then
						(( ! is_silent_FLAG )) && echo_info "$console_message ${BGREEN}SENT"
						file_io_link="$( jq --raw-output '.link' <<< "$filesharing_server_response" )"
						file_io_expiry="$( jq --raw-output '.expiry' <<< "$filesharing_server_response" )"
						echo_info "Download link ${WHITE}$file_io_link${NOCOLOR} will expire in $file_io_expiry"
					else
						errcho "$console_message ${BRED}SERVER ERROR${NOCOLOR}"
						errcho "$file_send_method response: $filesharing_server_response${NOCOLOR}"
						script_exitcode=1
					fi
				fi
				exit $(( script_exitcode ))
			;;

			'transfer.sh')
				filesharing_server_response="$( ${curl_protocol} --silent --upload-file "$file_to_send" "https://transfer.sh/$message_header" )"
				curl_exitcode=$?
				if (( curl_exitcode )); then
					errcho "$console_message ${BRED}NETWORK ERROR ($curl_exitcode)${NOCOLOR}"
					(( is_verbose_FLAG )) && errcho "$( human-curl-error "$curl_exitcode" )"
					script_exitcode="$curl_exitcode"
				else
					if [[ "$filesharing_server_response" =~ ^https://transfer.sh/ ]]; then
						(( ! is_silent_FLAG )) && echo_info "$console_message ${BGREEN}SENT"
						echo_info "Download link ${WHITE}$filesharing_server_response"
					else
						errcho "$console_message ${BRED}SERVER ERROR${NOCOLOR}"
						errcho "$file_send_method response: $filesharing_server_response${NOCOLOR}"
						script_exitcode=1
					fi
				fi
				exit $(( script_exitcode ))
			;;

		esac
	else
		errcho "$file_to_send not found or empty"
		exit 1
	fi
fi

# asserts
[[ -n "${HIVE_HOST_URL:-}" ]]	|| { errcho 'HIVE_HOST_URL not configured, cannot send a message to nowhere';	exit 1; }
[[ -n "${RIG_ID:-}" ]]			|| { errcho 'RIG_ID not configured, cannot send a message to nowhere';			exit 1; }
[[ -n "${RIG_PASSWD:-}" ]]		|| { errcho 'RIG_PASSWD not configured, cannot send a message to nowhere';		exit 1; }


#
# form a request packet
#

# shellcheck disable=SC2016
api_server_request="$(
	jq														\
		--null-input --compact-output						\
		--arg rig_id	"$RIG_ID"							\
		--arg passwd	"$RIG_PASSWD"						\
		--arg type		"$message_type"						\
		--arg data		"$message_header"					\
		'{
			"method": "message", "jsonrpc": "2.0", "id": 0,
			"params": {$rig_id, $passwd, $type, $data}
		}'
)"

# add msg_id if any
if [[ -n "$id" ]]; then
	# shellcheck disable=SC2016
	id_json="$( jq --arg id "$id" --null-input '{"params": {$id}}' )"
	api_server_request="$( jq --slurp --compact-output '.[0] * .[1]' <<< "$api_server_request $id_json" )"
fi

# add payload if any
if [[ -n "$payload" ]]; then
	# shellcheck disable=SC2016
	payload_json="$( jq --raw-input --slurp '{"params": {"payload": .}}' <<< "$payload" )"
	api_server_request="$( jq --slurp --compact-output '.[0] * .[1]' <<< "$api_server_request $payload_json" )"
fi

if [[ -z "$payload" ]]; then
	console_message="Sending ${message_color}${message_type^^}${NOCOLOR} message '$message_header'"
elif [[ -n "$file_to_send" ]]; then
	console_message="Sending file $file_to_send (${file_size} bytes compressed to ${#payload})"
else
	console_message="Sending ${message_color}${message_type^^}${NOCOLOR} message '$message_header' with payload (${#payload} bytes)"
fi

if (( is_verbose_FLAG )); then
	echo -n 'Request: '
	jq --color-output '.' <<< "$api_server_request"
fi

#
# send a message
# TODO should move to a separate function
#

declare -r -i curl_initial_connect_timeout=5
declare -r -i max_connection_attempts=30
declare -i attempts_counter curl_connect_timeout curl_max_time
declare attempts_message='' api_server_response_description=''
declare HIVE_API_endpoint to_host

for (( attempts_counter = 1; attempts_counter <= max_connection_attempts; attempts_counter++ )); do
	[[ -s "$API_HOST_FILE" ]] && source "$API_HOST_FILE" # load the most relevant HIVE_HOST_URL variable
	to_host=" to $HIVE_HOST_URL..."

	HIVE_API_endpoint="${HIVE_HOST_URL%/}/worker/api" # cut the trailing slash in HIVE_HOST_URL, if any (like as in rocketchain's local API server URL)

	((
		curl_connect_timeout = curl_initial_connect_timeout + attempts_counter,
		curl_max_time = curl_connect_timeout * 3
	))

	api_server_response="$(
		request_endpoint="${HIVE_API_endpoint}?id_rig=${RIG_ID}&method=message"
		${curl_protocol}									\
			--location --data @- --silent					\
															\
			--connect-timeout "$curl_connect_timeout"		\
			--max-time "$curl_max_time"						\
															\
			--header 'Content-Type: application/json'		\
			--request POST "$request_endpoint"				\
															\
		<<< "$api_server_request"
	)"
	curl_exitcode=$?
	(( attempts_counter > 1 || curl_exitcode )) && attempts_message="[$attempts_counter/$max_connection_attempts] "
	if (( curl_exitcode )); then
		is_silent_FLAG=0
		errcho "${attempts_message}${console_message}${to_host} ${BRED}FAIL ($curl_exitcode)${NOCOLOR}"
		(( is_verbose_FLAG )) && errcho "$( human-curl-error "$curl_exitcode" )"
		snore "$attempts_counter"
	else
		break
	fi
done

# check and validate the answer
if (( curl_exitcode )); then
	errcho "${attempts_message}${console_message}${to_host} ${BRED}FAIL ($curl_exitcode)${NOCOLOR}"
	(( is_verbose_FLAG )) && errcho "$( human-curl-error "$curl_exitcode" )"
	script_exitcode="$curl_exitcode"
else
	if api_server_response_description="$( is_api_server_response_ok "$api_server_response" )"; then
		(( ! is_silent_FLAG )) && echo_info "${attempts_message}${console_message}${to_host} ${BGREEN}SENT"
	else
		script_exitcode=$?
		errcho "${attempts_message}${console_message}${to_host} ${BRED}API SERVER ERROR${NOCOLOR}"
		if [[ -n "$api_server_response_description" ]]; then
			if [[ -n "$api_server_response" ]]; then
				errcho "$api_server_response_description (${RIG_ID}/${RIG_PASSWD}): $api_server_response"
			else
				errcho "$api_server_response_description (${RIG_ID}/${RIG_PASSWD})"
			fi
		else
			errcho 'No error description provided'
		fi
	fi

	if (( is_verbose_FLAG && ! script_exitcode )); then
		if [[ -n "$api_server_response" ]]; then
			echo -n 'Response: '
			jq --color-output '.' <<< "$api_server_response" 2> /dev/null || echo "$api_server_response"
		fi
	fi
fi

exit $(( script_exitcode ))
