#!/usr/bin/env bash
#export PATH="./:/hive/bin:/hive/sbin:$PATH"

SLEEP=10 #seconds to sleep over iteration
OK_MESSAGE_REDUCE=$(( 1 * 60 / $SLEEP )) #e.g. only every 12th message will be displayed to reduce log

RIG_CONF="/hive-config/rig.conf"

[ -t 1 ] && . /hive/bin/colors


function loadconf() {
	WD_ENABLED=

	if [ ! -f $RIG_CONF ]; then
		echo -e "${RED}No config $RIG_CONF${NOCOLOR}"
		echo "Exiting"
		exit 1
	else
		. $RIG_CONF
	fi


	[[ -z $WD_ENABLED || $WD_ENABLED != 1 ]] &&
		echo -e "${YELLOW}Watchdog not enabled, exiting${NOCOLOR}" &&
		exit 0
	fi

	if [[ ! -v WD_MINER && ! -v WD_REBOOT ]]; then
		message warning 'Restart and reboot timers are absent. Hashrate Watchdog disabled. Please configure properly' --silent --payload < "$RIG_CONF"
		log_line error 'WD_MINER and WD_REBOOT timers are absent. Hashrate Watchdog disabled, exiting'
		exit 1
	fi

	if [[ -z "$WD_MINER" && -z "$WD_REBOOT" ]]; then
		message warning 'Restart and reboot timers are empty. Hashrate Watchdog disabled. Please configure properly' --silent --payload < "$RIG_CONF"
		log_line error 'WD_MINER and WD_REBOOT timers are empty. Hashrate Watchdog disabled, exiting'
		exit 1
	fi

	# forcibly set to 0 if vars aren't set or are empty
	: "${WD_REBOOT:=0}"
	: "${WD_MINER:=0}"

	if (( ( ! WD_MINER ) && ( ! WD_REBOOT ) )); then
		message warning 'Restart and reboot timers both set to 0 (zero) minutes. Hashrate Watchdog disabled. Please configure properly' --silent --payload < "$RIG_CONF"
		log_line error 'WD_MINER and WD_REBOOT timers both set to 0 (zero) minutes. Hashrate Watchdog disabled, exiting'
		exit 1
}


function set_lastgood() {
	#lastgood=`date +%s`
	[[ -e /run/hive/khs ]] &&
		lastgood=`stat -c %Y /run/hive/khs` ||
		#lastgood=0 can't set it to 0, in case of boot agent may be late
		lastgood=`date +%s` #let's count from now

	miner_restart_count=0
}


set_lastgood
ok_count=0
function loop() {
	#echo -n "[`date`] "

	loadconf

	khs=
	[[ -e /run/hive/khs ]] && khs=`cat /run/hive/khs`
	[[ -z $khs ]] && khs=0


	hashok=`echo $khs $minhash | awk '{ print ($1 >= $2) ? 1 : 0 }'` #float comparison

	if [[ $hashok == 1 ]]; then
		set_lastgood
		if (( ok_count == 0 )); then
			log_line ok "$MINER hashrate OK (${WHITE}$( khs_to_human_friendly_hashrate "$khs" )${NOCOLOR} ${GREEN}>=${NOCOLOR} ${WHITE}$( khs_to_human_friendly_hashrate "$minhash" )${NOCOLOR})"
		fi
		(( ok_count++ ))
		(( ok_count >= OK_MESSAGE_REDUCE )) && ok_count=0
		return
	fi

	now="$( get_current_system_time_in_seconds )"
	(( elapsed = now - lastgood_khs ))
	elapsed_safe_limit="$( get_max_of_three_numbers $(( WD_REBOOT * 60 )) $(( WD_MINER * 60 )) $(( seconds_in_24h )) )"

	if (( elapsed > elapsed_safe_limit || elapsed < 0 )); then
		# most likely the system date was changed
		# !!! the watchdog limit is 24h or WD_REBOOT or WD_MINER (which is greater)
		log_line warning '!'
		log_line warning '! GRR-GRR! Something wrong with the system time?'
		log_line warning "! The last valid result was received a ${WHITE}$( seconds2dhms "$elapsed" )${NOCOLOR} ago"
		log_line warning '! Watchdog reset to a current time'
		log_line warning '!'
		# let's give another chance: update lastgood to a current datetime
		set_lastgood
		return
	fi
#
# checking for a flag file that does indicate that mining is stopped due to some manufacturing defects
# !!! postponed until the bug in hiveon miner will go away (sometimes it does a mining even if /config/stop-mining file exists
#
#	if [[ -s /config/stop-mining ]]; then
#		log_line warning "Safe mode for $MINER activated, watchdog paused and isn't active for ${WHITE}$( seconds2dhms "$elapsed" )${NOCOLOR}"
#		return
#	fi

	log_line warning "BARK-BARK! $MINER hashrate ${WHITE}$( khs_to_human_friendly_hashrate "$khs" ) ${YELLOW}<${NOCOLOR} ${WHITE}$( khs_to_human_friendly_hashrate "$minhash" )${NOCOLOR} for ${WHITE}$( seconds2dhms "$elapsed" )${NOCOLOR}"

	# check for reboot condition first
	if (( WD_REBOOT )); then
		(( reboot_timeout = WD_REBOOT * 60 ))
		if (( elapsed >= reboot_timeout )); then
			message danger "Hashrate Watchdog: low hashrate ($( khs_to_human_friendly_hashrate "$khs" )) for $( seconds2dhms "$elapsed" ), rebooting" --silent
			log_line error '!'
			log_line error "! Rebooting after $WD_REBOOT minutes of continuous barking"
			log_line error '!'
			#sreboot
			nohup bash -c 'reboot' > /tmp/nohup.log 2>&1 & disown
			return # for testing and in case it does not work
		fi
	fi

	# check for restart miner condition
	if (( WD_MINER )); then
		(( miner_restart_timeout = WD_MINER * 60 ))
		if (( miner_restart_count == 0 && elapsed >= miner_restart_timeout )); then
			message warning "Hashrate Watchdog: low hashrate ($( khs_to_human_friendly_hashrate "$khs" )) for $( seconds2dhms "$elapsed" ), restarting" --silent
			log_line warning '!'
			log_line warning "! Restarting $MINER after $WD_MINER minutes of continuous barking"
			log_line warning '!'
			miner_restart_count=1
			/hive/bin/miner restart
		fi
	fi
}


# consts

declare -r sleep_time=20 # seconds to sleep over iteration
declare -r OK_MESSAGE_REDUCE=$(( 1 * 60 / sleep_time )) # e.g. only every 12th message will be displayed to reduce log
declare -r RIG_CONF='/hive-config/rig.conf'
declare -r khs_FILE='/run/hive/khs'
#declare -r arr_FILE='/run/hive/arr' # accepted/rejected ratio file, reserved for future development


# vars

declare -i ok_count=0 miner_restart_count lastgood_khs last_RIG_CONF_date
declare minhash


# sources

[[ -t 1 ]] && source /hive/bin/colors
source /hive/bin/hive-functions.sh || { echo 'ERROR: /hive/bin/hive-functions.sh not found'; exit 1; }


# main

set_lastgood

case "$1" in
	'run'|'start')
		log_line info "$script_mission, version $script_version started"

		load_configuration

		while true; do
			kick_the_dog
			snore "$sleep_time"
		done
	;;

	'stop')
		# TODO get rid of 'stop' made out of shit and sticks -- refactor to stop on SIGUSR1 or SIGSTOP
		printf -v marker '%(%s)T-%s-%u%u' -1 "${FUNCNAME[0]}" "${RANDOM}" "${RANDOM}"
		self="(${$}|${BASHPID})[[:space:]].+$0"
		if ps w | grep -F -e "$0" -e "$marker" | grep -Ev -e "$marker" -e "$self" | awk '{print $1}' | xargs kill > /dev/null 2>&1; then
			log_line warning "$script_mission, version $script_version stopped"
		else
			log_line error "$script_mission, version $script_version was not running"
		fi
	;;

#	'start')
#		/hive/bin/wd run
#	;;

	'restart')
		/hive/bin/wd stop
		/hive/bin/wd run
	;;

	'log')
		print_script_version
		echo "TODO"
	;;

	'status')
		print_script_version
		self_count="$( pgrep_count "$0" )"
		if (( self_count )); then
			echo 'Watchdog is running'
		else
			echo 'Watchdog is not running'
		fi
	;;

	*)
		print_script_version
		echo -e "Usage: ${CYAN}$script_basename start|stop|restart|log|status${NOCOLOR}"
		echo
	;;
esac
