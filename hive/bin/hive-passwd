#!/hive/sbin/bash


#
# Copyright (C) 2017  Hiveon Holding LTD
# Distributed under Business Source License 1.1
# License information can be found in the LICENSE.txt file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#
# Linted by shellcheck 0.7.0
#


readonly script_mission='Client for ASICs: Password management for ssh and Antminer web interface'
readonly script_version='0.3.0'
readonly script_basename="${0##*/}"


# !!! bash strict mode, no unbound variables
set -o nounset


# functions

function print_script_version {
	echo "${YELLOW-}${script_mission}, version ${script_version}${NOCOLOR-}"
	echo
}

function print_script_usage {
	echo "Usage: ${CYAN-}${script_basename} [new_password] [OPTIONS]${NOCOLOR-}"
	echo
	echo "  ${WHITE-}-c, --conf${GRAY-}      set ssh password as a worker password (RIG_PASSWD)${NOCOLOR-}"
	echo "  ${WHITE-}-d, --default${GRAY-}   set ssh password to 'admin', web password to 'root'${NOCOLOR-}"
	echo "  ${WHITE-}-s, --show${GRAY-}      show current web and ssh passwords${NOCOLOR-}"
	echo "  ${WHITE-}-w, --web${GRAY-}       set password for the web interface (default is ssh password)${NOCOLOR-}"
	echo
}

function md5 {
	#
	# Usage: md5 'string'
	#

	# args

	(( $# == 1 )) || return 1
	local -r string="$1"

	# vars

	local md5_output

	# code

	md5_output="$( printf '%s' "$string" | md5sum )" # the string without a newline
	echo "${md5_output::32}"
}


# WORKER password

function get_worker_password {
	#
	# Usage: get_worker_password
	#

	# consts

	local -r RIG_CONF='/hive-config/rig.conf'

	# code

	if [[ -s "$RIG_CONF" ]] && source "$RIG_CONF" && [[ -n "${RIG_PASSWD-}" ]]; then
		echo "$RIG_PASSWD"
	else
		return 1
	fi
}


# SSH password

function show_ssh_passwords { # NOT USED -- we don't have a proper sha512 generator in the standard ASIC tooling
	#
	# Usage: show_ssh_passwords
	#

	# consts

	# shellcheck disable=SC2016
	local -r -A password_dictionary=(
#		['root']='root:$6$K/vQNJUn$ikrUf5YdPElcX5Sp2AUOrOfLVtLdMBp/zYFy1GCQpeOmS2ZcJQ8i5g3XKmf3rigb1sL.9dUxlfXqMdc/j.TBa1:18071:0:99999:7:::'
#		['root']='root:$6$M7IgIrZ5$QEt4GXhREGRYod4x0tYqZRHgLSYk9MBF6wjgTcfJu1Z9z9rOW7VeZPwfYOwlwGpsj.lkBg5hwSviVAk46qWIu0:18387:0:99999:7:::'
		['admin']='root:$6$saaYvC9T$PqLC9JWHDZsWYmpB0b0Zf.34b1m5/r9U6A8PPig2qzxAyUN78pyI/vi7OZrCA0T2y1fT5UNFtPiBYuCyBTA610:15975:0:99999:7:::'
	)
	# shellcheck disable=SC2016

	# flags

	local -i default_password_found_FLAG=0

	# vars

	local -a shadow_files_collection=( '/etc/shadow' )
	local this_file this_password shadow_string

	# code

	for this_file in '/etc/shadow.factory' '/config/shadow'; do
		cmp -s /etc/shadow "$this_file" || shadow_files_collection+=( "$this_file" )
	done

	for this_file in "${shadow_files_collection[@]}"; do
		default_password_found_FLAG=0
		for this_password in "${!password_dictionary[@]}"; do
			shadow_string="${password_dictionary[$this_password]}"
			if grep -Fqse "$shadow_string" -- "$this_file"; then
				# shellcheck disable=SC2059
				printf "$printf_template" "ssh password in $this_file"
				echo "${BRED}${this_password}${GRAY-} (pretty common, all viruses know it)${NOCOLOR-}"
				default_password_found_FLAG=1
			fi
		done

#		if (( ! default_password_found_FLAG )); then
#			echo "${BGREEN}non-standard${GRAY-} (and it's good)${NOCOLOR-}"
#		fi
	done
}

function show_ssh_password {
	#
	# Usage: show_ssh_password
	#

	# consts

	# shellcheck disable=SC2016
	local -r root_admin='root:$6$saaYvC9T$PqLC9JWHDZsWYmpB0b0Zf.34b1m5/r9U6A8PPig2qzxAyUN78pyI/vi7OZrCA0T2y1fT5UNFtPiBYuCyBTA610:15975:0:99999:7:::'

	# code

	if grep -Fqse "$root_admin" -- /etc/shadow; then
		# shellcheck disable=SC2059
		printf "$printf_template" "ssh password"
		echo "${BRED}admin${GRAY-} (default, all viruses know it)${NOCOLOR-}"
	fi
}

function set_ssh_password {
	#
	# Usage: set_ssh_password 'new_password'
	#

	# args

	(( $# == 1 )) || return 1
	local -r new_password="$1"

	# code

	echo -n "Setting ssh password to '${WHITE-}${new_password}${NOCOLOR-}'... "

	if printf '%s\n%s\n' "$new_password" "$new_password" | passwd root 2> /dev/null; then
		rm -f /config/shadow
		mv /etc/shadow /config/shadow
		ln -s /config/shadow /etc/shadow
		echo "${GREEN-}OK${NOCOLOR-}"
		echo
	else
		echo "${BRED-}FAILED${NOCOLOR-} (something bad happened)"
		echo
		return 1
	fi
}


# WEB password

function show_antminer_web_password {
	#
	# Usage: show_antminer_web_password
	#

	# consts

	local -r -A password_dictionary=(
		['root']='root:antMiner Configuration:23c2a2d78c0d20ec069097d7d20c4392'
		['root@']='root:antMiner Configuration:7f6bcb75db3228ac3289d0cbfa2e2926'
		['admin']='root:antMiner Configuration:c5a6e7cfb212161e98acdd2c27da8e64'
	)

	# vars

	local -i default_password_found_FLAG=0
	local this_lighttpd_password_FILE="$lighttpd_password_custom_FILE" # there are two lighttpd htdigest files: factory (in /etc) and custom (in /config)
	local this_password htdigest_string

	# code

	if [[ -s "$lighttpd_password_custom_FILE" ]]; then
		# do nothing special -- it's a default state
		:
	elif [[ -s "$lighttpd_password_factory_FILE" ]]; then
		# use factory file
		echo "${GRAY-}Using ${this_lighttpd_password_FILE}${NOCOLOR-}"
		this_lighttpd_password_FILE="$lighttpd_password_factory_FILE"
	else
		# oh no
		echo "${RED-}ERROR:${NOCOLOR-} both lighttpd htdigest files are not found"
		echo "Please run ${CYAN-}$script_basename your_password --web${NOCOLOR-} first"
		return 1
	fi

	# shellcheck disable=SC2059
	printf "$printf_template" 'Antminer web password'

	for this_password in "${!password_dictionary[@]}"; do
		htdigest_string="${password_dictionary[$this_password]}"
		if grep -Fqse "$htdigest_string" -- "$this_lighttpd_password_FILE"; then
			echo "${BRED}${this_password}${GRAY-} (default, all viruses know it)${NOCOLOR-}"
			default_password_found_FLAG=1
		fi
	done

	if (( ! default_password_found_FLAG )); then
		echo "${BGREEN}non-standard${GRAY-} (and it's good)${NOCOLOR-}"
	fi
}

function set_antminer_web_password {
	#
	# Usage: set_antminer_web_password 'new_password'
	#
	# var names are from RFC 2069

	# args

	(( $# == 1 )) || return 1
	local -r new_password="$1"

	# consts

	local -r username_value='root'
	local -r realm_value='antMiner Configuration'

	# vars

	local new_password_HA1 new_password_digest_string

	# code

	echo -n "Setting Antminer web password to '${WHITE-}${new_password}${NOCOLOR-}'... "

	new_password_HA1="$( md5 "${username_value}:${realm_value}:${new_password}" )"
	new_password_digest_string="${username_value}:${realm_value}:${new_password_HA1}"

	if [[ -s "$lighttpd_password_custom_FILE" ]]; then
		# compare the current password with the new
		if diff "$lighttpd_password_custom_FILE" <( echo "$new_password_digest_string" ) > /dev/null; then
			echo "${BYELLOW-}SKIPPED${NOCOLOR-} (new password is the same as the current one)"
			return 2
		fi
	else
		echo "${BYELLOW-}$lighttpd_password_custom_FILE not found or empty${NOCOLOR-} "
	fi

	# create new lighttpd-htdigest.user file
	if echo "$new_password_digest_string" > "$lighttpd_password_custom_FILE"; then
		if [[ -f '/etc/init.d/lighttpd' && -x '/etc/init.d/lighttpd' ]]; then
			echo "${GREEN-}OK${NOCOLOR-}, let's restart the web server"
			/etc/init.d/lighttpd force-reload
		else
			echo "${GREEN-}OK${NOCOLOR-}"
		fi
		return 0
	else
		echo "${BRED-}FAILED${NOCOLOR-} (something bad happened)"
		return 1
	fi
}

function parse_arguments {
	#
	# Usage: parse_arguments "$@"
	#

	# args

	new_ssh_password="${1-}"

	# vars

	local this_ARG RIG_PASSWD

	# code

	if [[ -z "$new_ssh_password" ]]; then
		print_script_usage
		exit 0
	fi

	for this_ARG in "$@"; do
		case "$this_ARG" in
			'-c' | '--conf')
				#echo 'rig.conf ON: set ssh password as a worker password (RIG_PASSWD)'
				if RIG_PASSWD="$( get_worker_password )"; then
					new_ssh_password="$RIG_PASSWD"
				else
					echo "Cannot get RIG_PASSWD from $RIG_CONF"
					exit 1
				fi
				;;
			'-d' | '--default')
				#echo "defaults ON: set ssh password to default 'admin', web password to default 'root'"
				new_ssh_password='admin'
				new_web_password='root'
				;;
			'-s' | '--show')
				show_antminer_web_password
				show_ssh_password
				printf "${printf_template}%s\n\n" 'RIG_PASSWD' "$( get_worker_password )"
				exit 0
				;;
			'-w'|'--web')
				new_web_password="$new_ssh_password"
				new_ssh_password=''
				;;
			'-h'|'--help')
				print_script_usage
				exit 0
				;;
		esac
	done
}


# global sources

source /hive/bin/asic-model || echo 'ERROR: /hive/bin/asic-model not found'
[[ -s /hive/bin/colors ]] && source /hive/bin/colors


# global consts

declare -r lighttpd_password_factory_FILE='/etc/lighttpd-htdigest.user'
declare -r lighttpd_password_custom_FILE='/config/lighttpd-htdigest.user'
declare -r printf_template='%21.21s: '


# global vars

declare new_ssh_password='' new_web_password=''


# main

print_script_version
parse_arguments "$@"

if [[ -n "$new_ssh_password" ]]; then
	set_ssh_password "$new_ssh_password"
fi

if [[ -n "$new_web_password" ]]; then
	if [[ "$ASIC_MANUFACTURER" == 'Bitmain' ]]; then
		set_antminer_web_password "$new_web_password"
	else
		echo "Antminer not detected (model: $ASIC_MODEL), cannot set web password${NOCOLOR-}"
		exit 1
	fi
fi
