#!/bin/bash
# Todek 

. colors
. asic-model

LOG_LINES=250
API_TIMEOUT=5
max_fan_rpm=$ASIC_MAX_FAN_RPM
if [[ "$ASIC_MODEL" == "Toddminer C1" ]]; then
	CHIPS=30
	POWER_BASE=40
	POWER_CHIP=14
	ERROR_HS=800
else
	CHIPS=57
	POWER_BASE=45
	POWER_CHIP=15
	ERROR_HS=1600
fi


function show_log(){
   local num=$1
   local log_file="/home/sm/miner/build/${num}mlog"
   echo "${YELLOW}==${NOCOLOR} ${log_file} ${YELLOW}====================${NOCOLOR}"
   cat $log_file | tail -n $LOG_LINES
}


function board_status(){
   local num=$1
   local log_file="/home/sm/miner/build/${num}mlog"
   brd_status=""
   brd_power=$POWER_BASE
   LOG=`tac $log_file | grep -m1 -A $CHIPS "board \(0\|1\) hashrate" | tac`
   if [[ ! -z $LOG ]]; then
      LOGTIME=`echo "${LOG}" | head -n 1 | awk '{print $1,$2}' | sed 's/^\[//' | sed 's/\]//' | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"`
      TIME_NOW=`date -u "+%s"`
      TIME_LOG=`date -u -d "$LOGTIME" "+%s"`
      LOG_FRESHNESS=$(( $TIME_NOW - $TIME_LOG ))
      if [[ $LOG_FRESHNESS -lt 120 ]]; then
         board_data=( `tac ${log_file} | grep -m 1 -B $((CHIPS-1)) "chip 0 hashrate " | awk '{ print $6 }' | tac` )
         brd_status=""
         #set -x
         for (( ch=0; ch < $CHIPS; ch++ )); do
            chip_hash=${board_data[$ch]}
            if [[ "$chip_hash" -gt 0 ]]; then
		chip_status="o"
		chip_power=$POWER_CHIP
            else
		chip_status="x"
		chip_power=0
            fi
            brd_status="${brd_status}${chip_status}"
            brd_power=$(( $brd_power + $chip_power ))
         done
      fi
   fi
}

miner_stat(){
	stats="null"

	local API_ports=(4049 4050 4052)
	local API_offset=(0 1 3)
	local algo="$ASIC_ALGO"
	local hs_units="$ASIC_CHAIN_HASHRATE_UNITS"
	local uptime=0
	local total_hs=0

	if [[ "$ASIC_MODEL" == "Toddminer C1" ]]; then
		local temp1=`expr $(cat /sys/devices/platform/ff140000.i2c/i2c-1/1-0048/hwmon/hwmon0/temp1_input) / 1000`
		local temp2=`expr $(cat /sys/devices/platform/ff660000.i2c/i2c-2/2-0048/hwmon/hwmon2/temp1_input) / 1000`
		local temp4=`expr $(cat /sys/devices/platform/ff160000.i2c/i2c-4/4-0048/hwmon/hwmon1/temp1_input) / 1000`

		local fan_rpm=(`cat /sys/todek/fanspeed/fan1` `cat /sys/todek/fanspeed/fan3`)
		local fan=( "$((${fan_rpm[0]} * 100 / $max_fan_rpm))" "$((${fan_rpm[1]} * 100 / $max_fan_rpm))")		
	else
		local temp1=`expr $(cat /sys/devices/platform/ff140000.i2c/i2c-1/1-0049/hwmon/hwmon1/temp1_input) / 1000`
		local temp2=`expr $(cat /sys/devices/platform/ff660000.i2c/i2c-2/2-0049/hwmon/hwmon5/temp1_input) / 1000`
		local temp4=`expr $(cat /sys/devices/platform/ff160000.i2c/i2c-4/4-0049/hwmon/hwmon3/temp1_input) / 1000`
		local fan_rpm=(`cat /sys/todek/fanspeed/fan*`)
		local fan=( "$((${fan_rpm[0]} * 100 / $max_fan_rpm ))" "$((${fan_rpm[1]} * 100 / $max_fan_rpm ))" "$((${fan_rpm[2]} * 100 / $max_fan_rpm ))" "$((${fan_rpm[3]} * 100 / $max_fan_rpm ))" )
	fi
	local temp=( $temp1 $temp2 $temp4 )
	
	local freq=( 400 400 400 )
	local acn=($CHIPS $CHIPS $CHIPS)
	local hs=()
	local status=() # chip status
	local power=() # 1380W C1 and 2700W C1 PRO
	local hw_errors=()
	local ac=0
	local rj=0

	for (( i=0; i < 3; i++ )); do
		miner_api_port=${API_ports[$i]}
		stats_raw=`echo "summary" | nc -w $API_TIMEOUT localhost $miner_api_port | awk '{print $1}'`
		if [[ $? -ne 0  || -z $stats_raw ]]; then
			acc[$i]=0
			rej[$i]=0
			hs[$i]=0
			temp[$i]=null
		else
			hs[$i]=`echo "$stats_raw" | tr ';' '\n' | grep -m1 'Gh/s=' | sed -e 's/.*=//'`
			local hs_tmp=`echo ${hs[$i]} | awk '{ printf "%.0f",$1 }'`
			if [[ "$hs_tmp" -eq $ERROR_HS ]]; then # board not mining
			    hs[$i]=0
			    hs_tmp=0
			fi
			acc[$i]=`echo "$stats_raw" | tr ';' '\n' | grep -m1 'ACC=' | sed -e 's/.*=//'`
			rej[$i]=`echo "$stats_raw" | tr ';' '\n' | grep -m1 'REJ=' | sed -e 's/.*=//'`

			uptime_thread=`echo "$stats_raw" | tr ';' '\n' | grep -m1 'UPTIME=' | sed -e 's/.*=//'`
			[[ $uptime -lt $uptime_thread ]] && uptime=$uptime_thread
		fi

		ac=`expr $ac + ${acc[$i]}`
		rj=`expr $rj + ${rej[$i]}`
		total_hs=`echo $total_hs ${hs[$i]} | awk '{ printf "%.2f",$1+$2 }'`

		local brd_status=""
		if [[ "$hs_tmp" -eq 0 ]]; then
		   for (( smb=0; smb < $CHIPS; smb++ )); do
		      brd_status="${brd_status}x"
		   done
		   brd_power=$POWER_BASE
		else
		   board_status ${API_offset[$i]}
		fi

		status+=($brd_status)
		power+=($brd_power)
	done

	stats=$(jq -nc \
			--arg algo "$algo" \
			--argjson hs "`echo ${hs[@]} | tr " " "\n" | jq -cs '.'`"  \
			--arg hs_units "$hs_units" \
			--arg ac "$ac" --arg rj "$rj" \
			--argjson hw_errors "`echo ${rej[@]} | tr " " "\n" | jq -cs '.'`"  \
			--argjson acn "`echo ${acn[@]} | tr " " "\n" | jq -cs '.'`"  \
			--argjson freq "`echo ${freq[@]} | tr " " "\n" | jq -cs '.'`"  \
			--argjson temp "`echo ${temp[@]} | tr " " "\n" | jq -cs '.'`"  \
			--argjson fan "`echo ${fan[@]} | tr " " "\n" | jq -cs '.'`"  \
			--argjson fan_rpm "`echo ${fan_rpm[@]} | tr " " "\n" | jq -cs '.'`"  \
			--argjson power "`echo ${power[@]} | jq -cs '.'`"  \
			--argjson status "`printf '%s\n' "${status[@]}" | jq -R . | jq -cs '.'`"  \
			--arg uptime "$uptime" \
			'{$algo, $hs, $hs_units, ar: ['$ac', '$rj'], $hw_errors, $acn, $freq, $temp, $fan, $fan_rpm, $power, $status, $uptime}')
}

case "$1" in
   "stats")
      miner_stat
      echo $stats
   ;;
   "mlog")
      show_log 0
      show_log 1
#      show_log 2
      show_log 3
   ;;
   "mstart"|"restart")
      /home/sm/miner/build/miner.sh &
   ;;
   "mstop")
      systemctl stop miner0.timer
      systemctl disable miner0.timer
      systemctl stop miner1.timer
      systemctl disable miner1.timer
      systemctl stop miner2.timer
      systemctl disable miner2.timer
      systemctl stop miner3.timer
      systemctl disable miner3.timer
      killall cpuminer
   ;;
   "mconfig")
      cat /flask/sysconf/config/config.json
      cat /home/sm/miner/build//config*.json
   ;;
   *)
      if [[ -z $1 ]]; then
         echo "todd_api mlog|stats|mstart|mrestart|mstop"
      else
        echo "Command $1 not implemented"
      fi
   ;;
esac
