#!/hive/sbin/bash


#
# Copyright (C) 2017  Hiveon Holding LTD
# Distributed under Business Source License 1.1
# License information can be found in the LICENSE.txt file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#
# Linted by shellcheck 0.7.0
#


# shellcheck disable=SC2034,SC1091
{
	readonly script_mission='Client for ASICs: Miner controller'
	readonly script_version='1.3.9'
	readonly script_basename="${0##*/}"
	#
	source /hive/bin/hive-functions.sh || { echo 'ERROR: /hive/bin/hive-functions.sh not found'; exit 1; }
}


# functions

function echo_x {
	# args
	local -r event_type="${1-}"
	local -r event_message="${2-}"
	local -r event_statement="${3-}"

	# vars
	local event_prefix statement_color event_suffix name_color="${LGRAY-}"

	# code
	case "$event_type" in
		'ok'		)	event_prefix=':'		;	statement_color="${BGREEN-}"	;	event_suffix=''								;;
		'action'	)	event_prefix='>'		;	statement_color="${WHITE-}"		;	event_suffix='...'							;;
		'info'		)	event_prefix=':'		;	statement_color=''				;	event_suffix=''								;;
		'warning'	)	event_prefix=':'		;	statement_color="${BYELLOW-}"	;	event_suffix=''								;;
		'debug'		)	event_prefix=' [DEBUG]:';	statement_color="${BPURPLE-}"	;	event_suffix=''	;	name_color="${DGRAY-}"	;;
		'error'		)	event_prefix=':'		;	statement_color="${BRED-}"		;	event_suffix=''								;;
	esac
	if [[ -z "$event_statement" ]]; then
		echo -e "${name_color}${script_basename}${event_prefix} ${statement_color}${event_message}${event_suffix}${NOCOLOR-}"
	else
		echo -e "${name_color}${script_basename}${event_prefix} ${NOCOLOR-}${event_message}${event_suffix} ${statement_color}${event_statement}${NOCOLOR-}"
	fi
}

function script_usage {
	echo -e "Usage: ${CYAN-}$script_basename [start|stop|restart|config-gen]${NOCOLOR-}"
	echo -e "       ${CYAN-}$script_basename config [raw]${NOCOLOR-}                               display a miner config"
	echo -e "       ${CYAN-}$script_basename log [kernel|status|tuning|watchdog|all]${NOCOLOR-}    display a corresponding log"
	echo -e "       ${CYAN-}$script_basename tuning${NOCOLOR-}                                     deprecated, please do not use"
	echo
	echo -e "If you run ${CYAN-}$script_basename${NOCOLOR-} without parameters the miner screen will be tried to resume"
}


RIG_CONF="/hive-config/rig.conf"
WALLET_CONF="/hive-config/wallet.conf"

#[ -t 1 ] &&
. colors

#[ -z $1 ] && usage && exit 1


if [ ! -f $RIG_CONF ]; then
	echo -e "${RED}No config $RIG_CONF${NOCOLOR}"
	#exit 1
else
	. $RIG_CONF
fi


[[ -e $WALLET_CONF ]] && . $WALLET_CONF

[ -z $MINER ] && MINER="asicminer" && echo -e "${YELLOW}No miner set in config, will use default ${CYAN}\"asicminer\"${NOCOLOR}"

#sgminer-gm is deprecated...
miners_avail=("asicminer")
if ! printf '%s\n' "${miners_avail[@]}" | grep -Eq '^'$MINER'$' ; then
	echo -e "${RED}Create Flight Sheet with asicminer ${NOCOLOR}"
	message warn "Create Flight Sheet with asicminer"
	exit 1
fi


########################################################################################################################



function config-gen() {
	/hive/bin/asicminer-config
}


function start() {
	echo -e "Starting ${CYAN}$THIS_MINER_NAME${NOCOLOR}"
	for i in {1..15}; do
		test_miner="$(ps | grep -e bmminer -e cgminer -e single-board-test | grep -v 'grep')"
		if [ -z "$test_miner" ] ; then
			config-gen
			screen -d > /dev/null
			if [[ $ASIC_MODEL =~ ".g19" ]]; then
				systemctl start cgminer.service
			elif [[ $ASIC_MODEL =~ "Zig Z1" ]]; then
				break
			elif [[ $ASIC_MODEL == "T4.G19" ]]; then
				python3.4 /home/inno_tools/start_miner.py &
			else
				nohup /etc/init.d/$THIS_MINER_NAME.sh start > /dev/null 2>&1 &
			fi
			break
		fi
		sleep 1
	done
	echo "";
}


function stop() {
	echo -e "Stopping ${CYAN}$MINER${NOCOLOR}"
	if [[ $ASIC_MODEL =~ ".g19" ]]; then
		systemctl stop cgminer.service
	elif [[ $ASIC_MODEL =~ "Zig Z1" ]]; then
		pidof miner | xargs kill -9
	elif [[ $ASIC_MODEL == "T4.G19" ]]; then
		killall innominer_T4
	else
		/etc/init.d/$THIS_MINER_NAME.sh stop
	fi
}


function miner_log_basename() {
	local miner=$1
	[[ -z $miner ]] && echo "No miner given to miner_log_basename" && return 1

        if [ ! -z $LOG_PATH ]; then
                log_basename="${LOG_PATH}"
        else
                log_basename=""
                echo "Unknown asic $ASIC_MODEL to miner_log_basename"
                return 1
        fi

	echo $log_basename
	return 0
}

function log_tail() {
	local TAIL_LINE=80

	log_basename=`miner_log_basename $MINER`
	if [[ $ASIC_MODEL =~ ".g19" ]]; then
		journalctl -n $TAIL_LINE
	else
		if [[ $? > 0 ]]; then
			echo $log_basename #show error message
			return
		fi

		#logname="${log_basename}.log"
		logname="${log_basename}"

		if [[ ! -e $logname ]]; then
			echo "Log $logname does not exist yet"
			return
		fi

		if [[ `ls -l $logname | awk '{print $5}'` -le 1 ]]; then #can be 1, empty line
			echo "Log $logname is empty"
			return
		fi


		echo -e "${YELLOW}=== $logname last $TAIL_LINE lines =================================================${NOCOLOR}"
		echo "Last modified `stat -c %y $logname`"
		echo ""
		#tail -n $TAIL_LINE $logname | sed "s,$(printf '\033')\\[[0-9;]*[a-zA-Z],,g" #sed removes colors
		tail -n $TAIL_LINE $1 $logname
	fi
}

function print_tune_log {
	local -r tune_log_file_17='/tmp/tune_log.txt'
	local -r tune_log_file_9='/tmp/auto-tune'
	local this_tune_log_script

	if [[ -s "$tune_log_file_17" ]]; then
		cat "$tune_log_file_17"
	elif [[ -s "$tune_log_file_9" ]]; then
		cat "$tune_log_file_9"
	else
		for this_tune_log_script in '/www/pages/cgi-bin/get_auto_tune_log.cgi' '/www/pages/cgi-bin/get_tune_log.cgi'; do
			if [[ -s "$this_tune_log_script" ]]; then
				sh "$this_tune_log_script"
			fi
		done
	fi
}

function tail_tune_log {
	print_tune_log | tail_any_log -t "$lines_to_tail"
}

function tail_miner_status_log {
	local -r miner_status_log_file='/nvdata/miner_status.log'
	tail_any_log -t "$lines_to_tail" "$miner_status_log_file"
}

function tail_watchdog_log {
	local -r watchdog_log_file='/config/watchdog.log'
	tail_any_log -t "$lines_to_tail" "$watchdog_log_file"
}

function collate_all_logs {
	{	# !!! duct tape, should refactor someday
		print_kernel_log --print-precise-timestamps
		print_tune_log
		[[ -s /nvdata/miner_status.log ]]	&& tail -n "$lines_to_tail" /nvdata/miner_status.log
		[[ -s /config/watchdog.log ]]		&& tail -n "$lines_to_tail" /config/watchdog.log
	} |
		tail_any_log -t "$lines_to_tail" -s -r '^[0-9]'
}


# consts

declare -r -i lines_to_tail=300
declare -r RIG_CONF_default='/hive-config/rig.conf'
declare -r RIG_CONF="${RIG_CONF:-$RIG_CONF_default}" # for ASIC emulator: set to default only if RIG_CONF variable is empty
declare -r WALLET_CONF='/hive-config/wallet.conf'


# vars

declare -i is_no_Flight_Sheet=0


# sources

# shellcheck disable=SC1091
source /hive/bin/colors
# shellcheck disable=SC1091
source /hive/bin/asic-model


# main

if [[ ! -s "$RIG_CONF" ]]; then
	echo_x warning "Config file $RIG_CONF empty or not found"
	# don't have to exit -- we simply don't have a config atm
	#exit 1
else
	# shellcheck disable=SC1090
	source "$RIG_CONF"
fi

if [[ ! -s "$WALLET_CONF" ]]; then
	echo_x warning "Wallet file $WALLET_CONF empty not found"
else
	# shellcheck disable=SC1090
	source "$WALLET_CONF"
fi

if [[ -z "$MINER" ]]; then
	# rig.conf not found or empty
	echo_x warning "No miner set in $RIG_CONF, will use default ${CYAN-}asicminer${NOCOLOR-}"
	is_no_Flight_Sheet=1
elif [[ "$MINER" != 'asicminer' ]]; then
	# default rig.conf (before applying an any Flight Sheet) contains claymore as a default miner
	echo_x warning  'To start mining, you only have to apply a Flight Sheet'
	message warning 'To start mining, you only have to apply a Flight Sheet' --silent
	is_no_Flight_Sheet=1
fi

case "$1" in
	'config')
		case "$2" in
			'raw')			print_config_raw					;;
			*)				print_config						;;
		esac
	;;

	'config-gen')
		generate_config
	;;

	'kernel-log')		# deprecated
		print_kernel_log
	;;

	'log')
		case "$2" in
			'all')			collate_all_logs					;;
			'kernel')		print_kernel_log					;;
			'status')		tail_miner_status_log				;;
			'tuning')		tail_tune_log						;;
			'watchdog')		tail_watchdog_log					;;
			'file')			# !!! duct tape
							# probably improve it by adding --file option for any of miner logs?
							# ...or carry over all the log handling to the brand new stand-alone log facility (it's better from the architectural point of view)
							print_default_log > /tmp/kernel.log
							message file /tmp/kernel.log --silent
							rm /tmp/kernel.log					;;
			*)				print_default_log					;;
		esac
	;;

	'restart')
		miner_restart
	;;

	'start')
		miner_start 'by_user'
	;;

	'stop')
		miner_stop 'by_user'
	;;

	'tuning')
		# deprecated. please use more consistent 'miner log tuning'
		tail_tune_log
	;;

	'')
		print_script_version
		screen -x -S bmminer > /dev/null ||
			screen -x -S cgminer > /dev/null ||
				echo_x info 'No miner screen running'
	;;

	'-h'|'--help'|*)
		print_script_version
		script_usage
	;;
esac
