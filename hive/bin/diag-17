#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#


readonly script_mission='Client for ASICs: Antminer Series 15/17 Error Report'
readonly script_version='1.14.11'
readonly script_basename="${0##*/}"
#
readonly script_DEBUG="${script_DEBUG:-0}" # use value from env if exists


# !!! bash strict mode, no unbound variables
set -o nounset


# functions

function print_script_version {
	echo -e "${YELLOW-}${script_mission}, version ${script_version}${NOCOLOR-}"
	echo
}

function print_script_usage {
	echo -e "Usage: ${CYAN-}$script_basename [number of days]${NOCOLOR-}"
	echo
}

function set_view {
	local -r -i terminal_width_DEFAULT='109' # the width of Hive OS 'remote command result' window
	local -r -A view_settings=(
		[views_list]='wide normal compact'

		[wide.date_width]='2'
		[wide.first_column_width]='35'
		[wide.first_column_printf_format]='%-35.35s'
		[wide.data_column_width]='4'
		[wide.data_column_printf_format]='%4.4s'
		[wide.days_limit]='20'

		[normal.date_width]='2'
		[normal.first_column_width]='35'
		[normal.first_column_printf_format]='%-35.35s'
		[normal.data_column_width]='3'
		[normal.data_column_printf_format]='%3.3s'
		[normal.days_limit]='26'

		[compact.date_width]='1'
		[compact.first_column_width]='35'
		[compact.first_column_printf_format]='%-35.35s'
		[compact.data_column_width]='1'
		[compact.data_column_printf_format]='%1.1s'
		[compact.days_limit]='38'
	)
	local -i terminal_width='0'
	local this_view=''

	if [[ -t 1 ]]; then
		readonly terminal_width="$( stty size | cut -d' ' -f2 )"
	else
		readonly terminal_width="$terminal_width_DEFAULT"
		(( script_DEBUG )) && echo "No terminal, use default width $terminal_width."
	fi

	for this_view in ${view_settings[views_list]}; do
		(( table_width = ${view_settings[${this_view}.first_column_width]} + ( ${view_settings[${this_view}.data_column_width]} * days_to_look_back ) ))
		(( script_DEBUG )) && echo "'$this_view' view, table width $table_width, terminal width $terminal_width"
		if (( table_width <= terminal_width )); then
			current_view="$this_view"
			break
		fi
	done

	if [[ -z "$current_view" ]]; then
		echo "Table is too wide ($table_width) to fit in the current terminal width ($terminal_width)."
		exit 2
	fi

	readonly first_column_width="${view_settings[${current_view}.first_column_width]}"
	readonly first_column_printf_format="${view_settings[${current_view}.first_column_printf_format]}"
	readonly data_column_printf_format="${view_settings[${current_view}.data_column_printf_format]}"
	readonly date_width="${view_settings[${current_view}.date_width]}"
}

function intro {
	local -i -r last_errors_count=5
	local -r errors_RE='ERR|WARN'

	if [[ -s $miner_status_log_file ]] && { grep -qE -e "$errors_RE" -- "$miner_status_log_file"; }; then
		#echo "Last $last_errors_count errors"
		grep -E -e "$errors_RE" -- "$miner_status_log_file" | tail -n "$last_errors_count"
		echo '---------- --------'
	fi

	printf '%(%F %T)T Report for the last %u days, %s view\n' -1 "$days_to_look_back" "$current_view"

	if (( days_to_look_back > days_to_look_back_DEFAULT )); then
		printf '%(%F %T)T Warning: operation can take a long time\n' -1
	fi

	echo
}

function create_calendar {
	local -i current_day_in_seconds=0
	local current_day_in_yymmdd=''

	printf -v current_day_in_seconds '%(%s)T' # unix time of now

	for (( i=0; i < days_to_look_back; i++ )); do
		printf -v current_day_in_yymmdd '%(%F)T' "$current_day_in_seconds" # convert unix time to yy-mm-dd
		last_days_calendar+=( "$current_day_in_yymmdd" ) # add date to array
		(( current_day_in_seconds -= 24 * 60 * 60 )) # get 24h back
	done

	if (( script_DEBUG )); then
		printf 'DEBUG> last_days_calendar array: '
		printf '[%s] ' "${last_days_calendar[@]}"
		printf '\n\n'
	fi
}

function check_log {
	if [[ ! -d "$logs_dir" ]]; then
		echo "$logs_dir not found. Is it Antminer Series 15/17?"
		echo
		echo "Other files are:"
		ls -l /
		exit 100
	fi
}

function check_for_1970 {
	if [[ -d "${logs_dir}/1970-01" ]]; then
		if [[ -n "$( find "${logs_dir}/1970-01/" -name log -type f -mtime "-${days_to_look_back}" )" ]]; then
				echo "${RED-}WARNING: Recently updated logs from 1970 year are found, check host time settings and ntpd.${NOCOLOR-}"
				echo
		fi
	fi

	return 0
}

function get_filtered_log {
	local -r files_to_grep="$( find "$logs_dir" '/var/log/' -name log -type f )"

	# WARNING: debug is extremely slow (20-30 minutes) on arm machines.
	if (( script_DEBUG )); then
		echo -n "DEBUG> 'log' files found: "
		wc -l -- <<< "$files_to_grep"

		echo -n "DEBUG> Number of lines: "
		cat -- $files_to_grep | tee "${script_basename}.debug.0" | wc -l

		echo -n "DEBUG> Number of unique lines: "
		cat -- "${script_basename}.debug.0" | sort -su | tee "${script_basename}.debug.1" | wc -l

		echo -n "DEBUG> Number of unique lines with timestamp: "
		cat -- "${script_basename}.debug.1" | grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2} ' | tee "${script_basename}.debug.2" | wc -l

		echo -n "DEBUG> Number of lines for the last $days_to_look_back days: "
		grep -hF -f <( printf '%s\n' "${last_days_calendar[@]}" ) -- "${script_basename}.debug.2" | tee "${script_basename}.debug.3" | wc -l
	fi

	grep -hF -f <( printf '%s\n' "${last_days_calendar[@]}" ) -- $files_to_grep |
			grep -E "$domains_of_interest" | sed 's@driver/@@' | sed 's@\.c:[0-9]\+:@\.c:@' | sort -su > "$log"
}

function get_unique_events_from_log {
	# 2020-03-09 18:39:32 driver/fan.c:59:update_fan_status: Error, fan lost, only find 3 (< 8)
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 0, fan_speed = 6000
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 1, fan_speed = 0
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 2, fan_speed = 5640
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 3, fan_speed = 5880
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 4, fan_speed = 0
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 5, fan_speed = 0
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 6, fan_speed = 0
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 7, fan_speed = 0
	# 2020-03-09 18:39:32 driver/driver-btm-api.c:175:set_miner_status: ERROR_FAN_LOST
	# 2020-03-09 18:39:38 driver/driver-btm-api.c:622:killall_hashboard: ****power off hashboard****

	# date       time     file                    num function     method       message
	# 2020-03-09 18:39:38 driver/driver-btm-api.c:137:stop_mining: stop mining: fan lost
	# ^^^^^^^^^^ ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^ ^^^^^^^^
	# f1         f2       f3                                       f4           f5

	local unique_events=''

	readarray -t error_domains < <( cat "$log" | cut -d ' ' -f 3 | sort -su )  # get list of error types (unique)

	if (( script_DEBUG )); then
		printf 'DEBUG> error domains: '
		printf '[%s] ' "${error_domains[@]}"
		printf '\n\n'
	fi

	for error_domain in "${error_domains[@]}"; do
		log_events+=( "${domain_prefix}${error_domain#*:}" )
		readarray -t -O "${#log_events[@]}" log_events < <( grep -F -e "$error_domain" -- "$log" | cut -d ' ' -f 4- | sort -su )  # get list of events (unique)
		if (( script_DEBUG )); then
			echo "Domain: '$error_domain' (${#log_events[@]})"
		fi
	done

	if (( script_DEBUG )); then
		printf 'DEBUG> log events: '
		set | grep log_events= | grep -v grep
		#printf '[%s] ' "${log_events[@]}"
		printf '\n\n'
	fi
}

function print_table_header {
	# consts

	local -r first_column_header='Events by date'

	# arrays

	local -A date_label

	# vars

	local today
	local date_category
	local this_date
	local -i this_day
	local display_color=''

	# code

	if [[ $current_view == 'wide' ]]; then
		date_label=( ['year']='year' ['month']='month' ['day']='day' )
	else
		date_label=( ['year']='y ' ['month']='m ' ['day']='d ' )
	fi

	printf -v today '%(%F)T'

	for date_category in year month day; do

		# print 1st column header only on 2nd line
		case "$date_category" in
			year)
				printf '%*s%s'                          "$(( first_column_width - ${#date_label[${date_category}]} ))" '' "${date_label[${date_category}]}"
				;;
			month)
				printf '%s%*s%s' "$first_column_header" "$(( first_column_width - ${#date_label[${date_category}]} - ${#first_column_header} ))" '' "${date_label[${date_category}]}"
				;;
			day)
				printf '%*s%s'                          "$(( first_column_width - ${#date_label[${date_category}]} ))" '' "${date_label[${date_category}]}"
				;;
		esac

		for (( this_day=days_to_look_back-1 ; this_day >= 0 ; this_day-- )); do
			this_date="${last_days_calendar[this_day]}"
			case "$date_category" in
				year)
					text="${this_date:2:2}"	# 2020-01-01
					;;
				month)
					text="${this_date:5:2}"	#   ^^ ^^ ^^
					;;
				day)
					text="${this_date:8:2}"	# 0123456789
					;;
			esac

			text="${text}"

			if [[ $text != "${previous_text-}" ]]; then
				if [[ $this_date == $today ]]; then # highlight current date
					display_color="${WHITE-}"
				else
					display_color="${GRAY-}"
				fi
			else
				display_color="${DGRAY-}"
			fi
			printf "%b${data_column_printf_format}%b" "$display_color" "${text: -${date_width}}" "${NOCOLOR-}"
			previous_text="$text" # save for next iteration
		done

		echo
	done
}

function calculate_data {
	local date_to_process

	local this_event
	local this_event_RE
	local -i this_day=0
	local -i this_event_counter=0
	local -i this_event_total=0

	local -i problem_days_count=0
	local -i all_events_total=0

	for this_event in "${log_events[@]}"; do
		for (( this_day=0 ; this_day < days_to_look_back ; this_day++ )); do
			date_to_process="${last_days_calendar[this_day]}"
			#this_event_RE="${date_to_process}.*${this_event}"
			this_event_counter="$( grep -F "$date_to_process" "$log" | grep -F -c "$this_event" )" # tenfold faster than bash matching

			events_data["${this_event}.${this_day}"]="$this_event_counter"

			(( this_event_total += this_event_counter ))
			if (( this_event_counter > 0 )); then
				(( problem_days_count++ ))
			fi
		done

		events_data["${this_event}.total"]=$(( this_event_total ))
		events_data["${this_event}.avg.per_day.x100"]=$(( (this_event_total*100) / (days_to_look_back) )) # x100 for fixed point
		events_data["${this_event}.avg.per_problem_day.x100"]=$(( problem_days_count > 0 ? (this_event_total*100) / (problem_days_count) : 0 )) # x100 for fixed point

		(( all_events_total += this_event_total ))

		this_event_total=0
		problem_days_count=0
	done

	events_data['#all.total']=$(( all_events_total ))
}

function print_table_body {
	local this_event_name=''
	local this_event_name_for_display=''
	local -i event_is_domain_name=0

	local -i this_day=0
	local -i event_counter=0
	local event_counter_for_display=''

	local display_color=''
	local -i avg_per_day_x100=0
	local -i avg_per_problem_day_x100=0

	# code

	for this_event_name in "${log_events[@]}"; do

		# print first column
		if [[ $this_event_name =~ $domain_prefix ]]; then
			event_is_domain_name=1
		else
			event_is_domain_name=0
		fi

		# special display format for domain names
		if (( event_is_domain_name )); then
			#this_event_name_for_display="-${this_event_name#${domain_prefix}}------------------------"
			this_event_name_for_display="${this_event_name#${domain_prefix}}"
			display_color="${GRAY-}"
		else
			avg_per_day_x100="${events_data[${this_event_name}.avg.per_day.x100]}"
			avg_per_problem_day_x100="${events_data[${this_event_name}.avg.per_problem_day.x100]}"

			#if (( (avg_per_problem_day_x100/10) >= (${events_data['#all.total']}/days_to_look_back) )); then
			#	display_color="${BRED-}"
			#else
			#	display_color="${NOCOLOR-}"
			#fi

			# transform event name to a simplified form thru event_name_translator[]
			for translator_key in "${!event_name_translator[@]}"; do # for each key in dictionary
				translator_value="${event_name_translator[${translator_key}]}" # get a transforming template
				#printf 'DEBUG: %s = %s\n' "${translator_key}" "${translator_value}"
				if [[ $this_event_name =~ $translator_key ]]; then
					for (( rematch_counter=1; rematch_counter < ${#BASH_REMATCH[@]}; rematch_counter++ )); do
						# use %n% as a numbered pointer to a capture group in translator_key: %1% %2% etc
						translator_value="${translator_value//%${rematch_counter}%/${BASH_REMATCH[$rematch_counter]}}"
					done
					this_event_name_for_display="$translator_value"
					break # let's assume that we want only 1 translation
				else
					this_event_name_for_display="$this_event_name"
				fi
			done
			display_color="${NOCOLOR-}"
		fi

		printf "%b${first_column_printf_format}%b" "$display_color" "$this_event_name_for_display" "${NOCOLOR-}"

		# print data columns

		for (( this_day=days_to_look_back-1 ; this_day >= 0 ; this_day-- )); do
			if (( event_is_domain_name )); then
				display_color='' # "${GRAY-}"
				event_counter_for_display='' # '------------------------'
			else
				event_counter="${events_data[${this_event_name}.${this_day}]}"

				if (( event_counter == 0 )); then
					display_color="${GRAY-}"
					event_counter_for_display="$zero_symbol"
				elif (( (event_counter*100) > avg_per_problem_day_x100 )); then
					# paint the value in red if it's greater than the day average for this event
					display_color="${BRED-}"
					event_counter_for_display="$event_counter"
				else
					# ordinary value
					display_color="${NOCOLOR-}"
					event_counter_for_display="$event_counter"
				fi
			fi

			if [[ $current_view == 'compact' && "$event_counter" -ne 0 ]]; then
				event_counter_for_display='+'
			fi

			printf "%b${data_column_printf_format}%b" "$display_color" "$event_counter_for_display" "${NOCOLOR-}"
		done

		# totals column
		#this_event_total="${events_data["${this_event_name}.total"]}"
		#printf "   %5d %5d %5d" "$this_event_total" "$avg_per_day_x100" "$avg_per_problem_day_x100"
		#printf ' %7.1f' "$(( 10**9 * ${accumulator[$this_event_name]} / days_to_look_back ))e-9" # yay, neat trick
		echo
	done
}

function print_stats {
	local -i -r average_per_day=$(( ${events_data['#all.total']} / days_to_look_back ))

	printf "\n%u events in %u days (%u per day in average)\n" "${events_data['#all.total']}" "$days_to_look_back" "$average_per_day"
	printf "Filtered log file saved to '%s' for further inspection\n" "$log"

	if (( days_to_look_back == days_to_look_back_DEFAULT )); then
		echo -e "${WHITE}Hint:${NOCOLOR} you can run ${CYAN-}$script_basename 30${NOCOLOR-} to get report for 30 days"
	fi
}


# global consts

declare -i -r days_to_look_back_DEFAULT='14'
declare -r log="/tmp/${script_basename}.log"
declare -r logs_dir='/nvdata'
declare -r miner_status_log_file='/nvdata/miner_status.log'
declare -r zero_symbol='-'
declare -r domain_prefix='<d0Ma1n> '


# global sources

source colors


# global dictionaries for data mining

readonly domains_of_interest=':set_miner_status|:check_miner_status|stop_mining|power off|update_fan_status: Error'
declare  -A event_name_translator=(
	# dictionary: event regex -> event transforming template. %1..9% for (group number)
	['Chain ([0-9]+) only find ([0-9]+) asic, will power off hash board ([0-9]+)']='Board %3% off (%2% chips found)' #'#syntax highlighting fix
	["Can't get temperature sensor type"]='temp sensor fail' #"#syntax highlighting fix
	['stop mining: (.+)']='%1%'
	['\*\*\*\*(power off hashboard)\*\*\*\*']='%1%'
	['Error, fan lost, only find ([0-9]+) \((..[0-9]+)\)']='Only %1% fan found (%2%)' #'#syntax highlighting fix
	['over max temp, pcb temp ([0-9]+) \(max ([0-9]+)\), chip temp ([0-9]+)\(max ([0-9]+)\)']='overheat: pcb %1%/%2%C, chip %3%/%4%C' #'#syntax highlighting fix
)


# global arrays

declare -a log_events=()
declare -a last_days_calendar=()
declare -A events_data=()
declare -a error_domains=() # ( f.e. 'check_asic_number_with_power_on:' 'killall_hashboard:' 'set_miner_status:' 'stop_mining:' 'stop_mining_and_reboot:' )


# global vars

declare first_column_printf_format=''
declare data_column_printf_format=''
declare date_width=''
declare current_view=''


# main()

print_script_version

# check and use args
if [[ $# -eq 0 || ${1-} =~ ^[0-9]+$ ]]; then
	declare -r -i days_to_look_back="${1:-${days_to_look_back_DEFAULT}}"
else
	print_script_usage
	exit 1
fi

set_view
intro
check_log

create_calendar

print_table_header

[[ -t 1 ]] && printf 'Collecting data...'

get_filtered_log
get_unique_events_from_log

calculate_data

[[ -t 1 ]] && printf '\r'

print_table_body
print_stats
check_for_1970
